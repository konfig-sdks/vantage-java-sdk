/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Price;
import com.konfigthis.client.model.Prices;
import com.konfigthis.client.model.Product;
import com.konfigthis.client.model.Products;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PricesApi
 */
@Disabled
public class PricesApiTest {

    private static PricesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PricesApi(apiClient);
    }

    /**
     * Return a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductTest() throws ApiException {
        String id = null;
        Product response = api.getProduct(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a price
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductPriceTest() throws ApiException {
        String productId = null;
        String id = null;
        Price response = api.getProductPrice(productId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Return available Prices across all Regions for a Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductPricesTest() throws ApiException {
        String productId = null;
        Integer page = null;
        Integer limit = null;
        Prices response = api.getProductPrices(productId)
                .page(page)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Return available Products for a Service. For example, with a Provider of AWS and a Service of EC2, Products will be a list of all EC2 Instances. By default, this endpoint returns all Products across all Services and Providers but has optional query parameters for filtering listed below.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailableProductsTest() throws ApiException {
        String providerId = null;
        String serviceId = null;
        String name = null;
        Integer page = null;
        Integer limit = null;
        Products response = api.listAvailableProducts()
                .providerId(providerId)
                .serviceId(serviceId)
                .name(name)
                .page(page)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

}
