/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Folder;
import com.konfigthis.client.model.Folders;
import com.konfigthis.client.model.PostFolders;
import com.konfigthis.client.model.PutFolders;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersApi
 */
@Disabled
public class FoldersApiTest {

    private static FoldersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FoldersApi(apiClient);
    }

    /**
     * Create a Folder for CostReports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFolderForCostReportsTest() throws ApiException {
        String title = null;
        String parentFolderToken = null;
        List<String> savedFilterTokens = null;
        String workspaceToken = null;
        Folder response = api.createFolderForCostReports(title)
                .parentFolderToken(parentFolderToken)
                .savedFilterTokens(savedFilterTokens)
                .workspaceToken(workspaceToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Folder for CostReports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderForCostReportsTest() throws ApiException {
        String folderToken = null;
        Folder response = api.deleteFolderForCostReports(folderToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a specific Folder for CostReports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificFolderTest() throws ApiException {
        String folderToken = null;
        Folder response = api.getSpecificFolder(folderToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all Folders for CostReports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCostReportsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Folders response = api.listCostReports()
                .page(page)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Folder for CostReports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFolderForCostReportsTest() throws ApiException {
        String folderToken = null;
        String title = null;
        String parentFolderToken = null;
        List<String> savedFilterTokens = null;
        Folder response = api.updateFolderForCostReports(folderToken)
                .title(title)
                .parentFolderToken(parentFolderToken)
                .savedFilterTokens(savedFilterTokens)
                .execute();
        // TODO: test validations
    }

}
