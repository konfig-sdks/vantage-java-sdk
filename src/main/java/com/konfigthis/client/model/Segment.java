/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SegmentReportSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Segment model
 */
@ApiModel(description = "Segment model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Segment {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_PARENT_SEGMENT_TOKEN = "parent_segment_token";
  @SerializedName(SERIALIZED_NAME_PARENT_SEGMENT_TOKEN)
  private String parentSegmentToken;

  public static final String SERIALIZED_NAME_TRACK_UNALLOCATED = "track_unallocated";
  @SerializedName(SERIALIZED_NAME_TRACK_UNALLOCATED)
  private Boolean trackUnallocated;

  public static final String SERIALIZED_NAME_REPORT_SETTINGS = "report_settings";
  @SerializedName(SERIALIZED_NAME_REPORT_SETTINGS)
  private SegmentReportSettings reportSettings;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_WORKSPACE_TOKEN = "workspace_token";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_TOKEN)
  private String workspaceToken;

  public Segment() {
  }

  public Segment title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title of the Segment.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OPEX", value = "The title of the Segment.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Segment description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the Segment.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Operating expenses", value = "The description of the Segment.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Segment token(String token) {
    
    
    
    
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    
    
    
    this.token = token;
  }


  public Segment parentSegmentToken(String parentSegmentToken) {
    
    
    
    
    this.parentSegmentToken = parentSegmentToken;
    return this;
  }

   /**
   * The token of the parent Segment of this Segment.
   * @return parentSegmentToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The token of the parent Segment of this Segment.")

  public String getParentSegmentToken() {
    return parentSegmentToken;
  }


  public void setParentSegmentToken(String parentSegmentToken) {
    
    
    
    this.parentSegmentToken = parentSegmentToken;
  }


  public Segment trackUnallocated(Boolean trackUnallocated) {
    
    
    
    
    this.trackUnallocated = trackUnallocated;
    return this;
  }

   /**
   * Track Unallocated Costs which are not assigned to any of the created Segments.
   * @return trackUnallocated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Track Unallocated Costs which are not assigned to any of the created Segments.")

  public Boolean getTrackUnallocated() {
    return trackUnallocated;
  }


  public void setTrackUnallocated(Boolean trackUnallocated) {
    
    
    
    this.trackUnallocated = trackUnallocated;
  }


  public Segment reportSettings(SegmentReportSettings reportSettings) {
    
    
    
    
    this.reportSettings = reportSettings;
    return this;
  }

   /**
   * Get reportSettings
   * @return reportSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SegmentReportSettings getReportSettings() {
    return reportSettings;
  }


  public void setReportSettings(SegmentReportSettings reportSettings) {
    
    
    
    this.reportSettings = reportSettings;
  }


  public Segment priority(Integer priority) {
    
    
    
    
    this.priority = priority;
    return this;
  }

   /**
   * Costs are assigned in priority order across all Segments with assigned filters.
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Costs are assigned in priority order across all Segments with assigned filters.")

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    
    
    
    this.priority = priority;
  }


  public Segment filter(String filter) {
    
    
    
    
    this.filter = filter;
    return this;
  }

   /**
   * The filter applied to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The filter applied to the Segment. Additional documentation available at https://docs.vantage.sh/vql.")

  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    
    
    
    this.filter = filter;
  }


  public Segment createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time, in UTC, the Segment was created. ISO 8601 Formatted.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-09T00:00:00Z", value = "The date and time, in UTC, the Segment was created. ISO 8601 Formatted.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Segment workspaceToken(String workspaceToken) {
    
    
    
    
    this.workspaceToken = workspaceToken;
    return this;
  }

   /**
   * The token for the Workspace the Segment is a part of.
   * @return workspaceToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The token for the Workspace the Segment is a part of.")

  public String getWorkspaceToken() {
    return workspaceToken;
  }


  public void setWorkspaceToken(String workspaceToken) {
    
    
    
    this.workspaceToken = workspaceToken;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Segment instance itself
   */
  public Segment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Segment segment = (Segment) o;
    return Objects.equals(this.title, segment.title) &&
        Objects.equals(this.description, segment.description) &&
        Objects.equals(this.token, segment.token) &&
        Objects.equals(this.parentSegmentToken, segment.parentSegmentToken) &&
        Objects.equals(this.trackUnallocated, segment.trackUnallocated) &&
        Objects.equals(this.reportSettings, segment.reportSettings) &&
        Objects.equals(this.priority, segment.priority) &&
        Objects.equals(this.filter, segment.filter) &&
        Objects.equals(this.createdAt, segment.createdAt) &&
        Objects.equals(this.workspaceToken, segment.workspaceToken)&&
        Objects.equals(this.additionalProperties, segment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, token, parentSegmentToken, trackUnallocated, reportSettings, priority, filter, createdAt, workspaceToken, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Segment {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    parentSegmentToken: ").append(toIndentedString(parentSegmentToken)).append("\n");
    sb.append("    trackUnallocated: ").append(toIndentedString(trackUnallocated)).append("\n");
    sb.append("    reportSettings: ").append(toIndentedString(reportSettings)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    workspaceToken: ").append(toIndentedString(workspaceToken)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("token");
    openapiFields.add("parent_segment_token");
    openapiFields.add("track_unallocated");
    openapiFields.add("report_settings");
    openapiFields.add("priority");
    openapiFields.add("filter");
    openapiFields.add("created_at");
    openapiFields.add("workspace_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Segment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Segment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Segment is not found in the empty JSON string", Segment.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("parent_segment_token") != null && !jsonObj.get("parent_segment_token").isJsonNull()) && !jsonObj.get("parent_segment_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_segment_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_segment_token").toString()));
      }
      // validate the optional field `report_settings`
      if (jsonObj.get("report_settings") != null && !jsonObj.get("report_settings").isJsonNull()) {
        SegmentReportSettings.validateJsonObject(jsonObj.getAsJsonObject("report_settings"));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("workspace_token") != null && !jsonObj.get("workspace_token").isJsonNull()) && !jsonObj.get("workspace_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Segment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Segment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Segment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Segment.class));

       return (TypeAdapter<T>) new TypeAdapter<Segment>() {
           @Override
           public void write(JsonWriter out, Segment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Segment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Segment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Segment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Segment
  * @throws IOException if the JSON string is invalid with respect to Segment
  */
  public static Segment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Segment.class);
  }

 /**
  * Convert an instance of Segment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

