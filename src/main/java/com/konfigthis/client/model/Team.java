/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Team model
 */
@ApiModel(description = "Team model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Team {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WORKSPACE_TOKENS = "workspace_tokens";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_TOKENS)
  private List<String> workspaceTokens = null;

  public static final String SERIALIZED_NAME_USER_EMAILS = "user_emails";
  @SerializedName(SERIALIZED_NAME_USER_EMAILS)
  private List<String> userEmails = null;

  public static final String SERIALIZED_NAME_USER_TOKENS = "user_tokens";
  @SerializedName(SERIALIZED_NAME_USER_TOKENS)
  private List<String> userTokens = null;

  public Team() {
  }

  public Team description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the Team.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The Team that saves costs", value = "The description of the Team.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Team token(String token) {
    
    
    
    
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    
    
    
    this.token = token;
  }


  public Team name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the Team.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cost Savers", value = "The name of the Team.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Team workspaceTokens(List<String> workspaceTokens) {
    
    
    
    
    this.workspaceTokens = workspaceTokens;
    return this;
  }

  public Team addWorkspaceTokensItem(String workspaceTokensItem) {
    if (this.workspaceTokens == null) {
      this.workspaceTokens = new ArrayList<>();
    }
    this.workspaceTokens.add(workspaceTokensItem);
    return this;
  }

   /**
   * The tokens for any Workspaces that the Team belongs to
   * @return workspaceTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tokens for any Workspaces that the Team belongs to")

  public List<String> getWorkspaceTokens() {
    return workspaceTokens;
  }


  public void setWorkspaceTokens(List<String> workspaceTokens) {
    
    
    
    this.workspaceTokens = workspaceTokens;
  }


  public Team userEmails(List<String> userEmails) {
    
    
    
    
    this.userEmails = userEmails;
    return this;
  }

  public Team addUserEmailsItem(String userEmailsItem) {
    if (this.userEmails == null) {
      this.userEmails = new ArrayList<>();
    }
    this.userEmails.add(userEmailsItem);
    return this;
  }

   /**
   * The email addresses for Users that belong to the Team
   * @return userEmails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses for Users that belong to the Team")

  public List<String> getUserEmails() {
    return userEmails;
  }


  public void setUserEmails(List<String> userEmails) {
    
    
    
    this.userEmails = userEmails;
  }


  public Team userTokens(List<String> userTokens) {
    
    
    
    
    this.userTokens = userTokens;
    return this;
  }

  public Team addUserTokensItem(String userTokensItem) {
    if (this.userTokens == null) {
      this.userTokens = new ArrayList<>();
    }
    this.userTokens.add(userTokensItem);
    return this;
  }

   /**
   * The tokens for Users that belong to the Team
   * @return userTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tokens for Users that belong to the Team")

  public List<String> getUserTokens() {
    return userTokens;
  }


  public void setUserTokens(List<String> userTokens) {
    
    
    
    this.userTokens = userTokens;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Team instance itself
   */
  public Team putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.description, team.description) &&
        Objects.equals(this.token, team.token) &&
        Objects.equals(this.name, team.name) &&
        Objects.equals(this.workspaceTokens, team.workspaceTokens) &&
        Objects.equals(this.userEmails, team.userEmails) &&
        Objects.equals(this.userTokens, team.userTokens)&&
        Objects.equals(this.additionalProperties, team.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, token, name, workspaceTokens, userEmails, userTokens, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    workspaceTokens: ").append(toIndentedString(workspaceTokens)).append("\n");
    sb.append("    userEmails: ").append(toIndentedString(userEmails)).append("\n");
    sb.append("    userTokens: ").append(toIndentedString(userTokens)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("token");
    openapiFields.add("name");
    openapiFields.add("workspace_tokens");
    openapiFields.add("user_emails");
    openapiFields.add("user_tokens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Team
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Team.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Team is not found in the empty JSON string", Team.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workspace_tokens") != null && !jsonObj.get("workspace_tokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_tokens` to be an array in the JSON string but got `%s`", jsonObj.get("workspace_tokens").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_emails") != null && !jsonObj.get("user_emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_emails` to be an array in the JSON string but got `%s`", jsonObj.get("user_emails").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_tokens") != null && !jsonObj.get("user_tokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_tokens` to be an array in the JSON string but got `%s`", jsonObj.get("user_tokens").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Team.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Team' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Team> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Team.class));

       return (TypeAdapter<T>) new TypeAdapter<Team>() {
           @Override
           public void write(JsonWriter out, Team value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Team read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Team instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Team given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Team
  * @throws IOException if the JSON string is invalid with respect to Team
  */
  public static Team fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Team.class);
  }

 /**
  * Convert an instance of Team to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

