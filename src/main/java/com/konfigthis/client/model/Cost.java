/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Cost
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Cost {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_ACCRUED_AT = "accrued_at";
  @SerializedName(SERIALIZED_NAME_ACCRUED_AT)
  private String accruedAt;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * The cost provider which incurred the cost.
   */
  @JsonAdapter(ProviderEnum.Adapter.class)
 public enum ProviderEnum {
    AWS("aws"),
    
    AZURE("azure"),
    
    GCP("gcp"),
    
    SNOWFLAKE("snowflake"),
    
    DATABRICKS("databricks"),
    
    MONGO("mongo"),
    
    DATADOG("datadog"),
    
    FASTLY("fastly"),
    
    NEW_RELIC("new_relic"),
    
    OPENCOST("opencost"),
    
    OPEN_AI("open_ai"),
    
    ORACLE("oracle"),
    
    CONFLUENT("confluent"),
    
    PLANETSCALE("planetscale"),
    
    CORALOGIX("coralogix"),
    
    KUBERNETES("kubernetes");

    private String value;

    ProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderEnum fromValue(String value) {
      for (ProviderEnum b : ProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private ProviderEnum provider;

  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_ID = "billing_account_id";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_ID)
  private String billingAccountId;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resource_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_COST_CATEGORY = "cost_category";
  @SerializedName(SERIALIZED_NAME_COST_CATEGORY)
  private String costCategory;

  public static final String SERIALIZED_NAME_COST_SUBCATEGORY = "cost_subcategory";
  @SerializedName(SERIALIZED_NAME_COST_SUBCATEGORY)
  private String costSubcategory;

  public Cost() {
  }

  public Cost tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public Cost addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tag pairs attached to the cost that was incurred.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tag pairs attached to the cost that was incurred.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public Cost links(Object links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getLinks() {
    return links;
  }


  public void setLinks(Object links) {
    
    
    
    this.links = links;
  }


  public Cost accruedAt(String accruedAt) {
    
    
    
    
    this.accruedAt = accruedAt;
    return this;
  }

   /**
   * The date the cost was accrued. ISO 8601 Formatted.
   * @return accruedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-09-05+00:00", value = "The date the cost was accrued. ISO 8601 Formatted.")

  public String getAccruedAt() {
    return accruedAt;
  }


  public void setAccruedAt(String accruedAt) {
    
    
    
    this.accruedAt = accruedAt;
  }


  public Cost amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the cost.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4.25", value = "The amount of the cost.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }


  public Cost currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the cost.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The currency of the cost.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public Cost provider(ProviderEnum provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * The cost provider which incurred the cost.
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AWS", value = "The cost provider which incurred the cost.")

  public ProviderEnum getProvider() {
    return provider;
  }


  public void setProvider(ProviderEnum provider) {
    
    
    
    this.provider = provider;
  }


  public Cost billingAccountId(String billingAccountId) {
    
    
    
    
    this.billingAccountId = billingAccountId;
    return this;
  }

   /**
   * The cost provider&#39;s billing account id that incurred the cost.
   * @return billingAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9109237192", value = "The cost provider's billing account id that incurred the cost.")

  public String getBillingAccountId() {
    return billingAccountId;
  }


  public void setBillingAccountId(String billingAccountId) {
    
    
    
    this.billingAccountId = billingAccountId;
  }


  public Cost accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * The cost provider&#39;s account id that incurred the cost.
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9109237192", value = "The cost provider's account id that incurred the cost.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }


  public Cost service(String service) {
    
    
    
    
    this.service = service;
    return this;
  }

   /**
   * The service which incurred the cost.
   * @return service
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Amazon Elastic Compute Cloud - Compute", value = "The service which incurred the cost.")

  public String getService() {
    return service;
  }


  public void setService(String service) {
    
    
    
    this.service = service;
  }


  public Cost region(String region) {
    
    
    
    
    this.region = region;
    return this;
  }

   /**
   * The region which incurred the cost.
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "us-east-1", value = "The region which incurred the cost.")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    
    
    
    this.region = region;
  }


  public Cost resourceId(String resourceId) {
    
    
    
    
    this.resourceId = resourceId;
    return this;
  }

   /**
   * The resource id which incurred the cost.
   * @return resourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "arn:aws:ec2:us-east-1:123456789012:instance/i-1234567890abcdef0", value = "The resource id which incurred the cost.")

  public String getResourceId() {
    return resourceId;
  }


  public void setResourceId(String resourceId) {
    
    
    
    this.resourceId = resourceId;
  }


  public Cost tag(String tag) {
    
    
    
    
    this.tag = tag;
    return this;
  }

   /**
   * The tag attached to the cost that was incurred. DEPRECATED: does not support multiple tags.
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "production", value = "The tag attached to the cost that was incurred. DEPRECATED: does not support multiple tags.")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    
    
    
    this.tag = tag;
  }


  public Cost costCategory(String costCategory) {
    
    
    
    
    this.costCategory = costCategory;
    return this;
  }

   /**
   * The category for the cost.
   * @return costCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Data Transfer", value = "The category for the cost.")

  public String getCostCategory() {
    return costCategory;
  }


  public void setCostCategory(String costCategory) {
    
    
    
    this.costCategory = costCategory;
  }


  public Cost costSubcategory(String costSubcategory) {
    
    
    
    
    this.costSubcategory = costSubcategory;
    return this;
  }

   /**
   * The subcategory for the cost.
   * @return costSubcategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DataTransfer-Regional-Bytes", value = "The subcategory for the cost.")

  public String getCostSubcategory() {
    return costSubcategory;
  }


  public void setCostSubcategory(String costSubcategory) {
    
    
    
    this.costSubcategory = costSubcategory;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Cost instance itself
   */
  public Cost putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cost cost = (Cost) o;
    return Objects.equals(this.tags, cost.tags) &&
        Objects.equals(this.links, cost.links) &&
        Objects.equals(this.accruedAt, cost.accruedAt) &&
        Objects.equals(this.amount, cost.amount) &&
        Objects.equals(this.currency, cost.currency) &&
        Objects.equals(this.provider, cost.provider) &&
        Objects.equals(this.billingAccountId, cost.billingAccountId) &&
        Objects.equals(this.accountId, cost.accountId) &&
        Objects.equals(this.service, cost.service) &&
        Objects.equals(this.region, cost.region) &&
        Objects.equals(this.resourceId, cost.resourceId) &&
        Objects.equals(this.tag, cost.tag) &&
        Objects.equals(this.costCategory, cost.costCategory) &&
        Objects.equals(this.costSubcategory, cost.costSubcategory)&&
        Objects.equals(this.additionalProperties, cost.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, links, accruedAt, amount, currency, provider, billingAccountId, accountId, service, region, resourceId, tag, costCategory, costSubcategory, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cost {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    accruedAt: ").append(toIndentedString(accruedAt)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    billingAccountId: ").append(toIndentedString(billingAccountId)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    costCategory: ").append(toIndentedString(costCategory)).append("\n");
    sb.append("    costSubcategory: ").append(toIndentedString(costSubcategory)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("links");
    openapiFields.add("accrued_at");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("provider");
    openapiFields.add("billing_account_id");
    openapiFields.add("account_id");
    openapiFields.add("service");
    openapiFields.add("region");
    openapiFields.add("resource_id");
    openapiFields.add("tag");
    openapiFields.add("cost_category");
    openapiFields.add("cost_subcategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Cost
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Cost.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cost is not found in the empty JSON string", Cost.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("accrued_at") != null && !jsonObj.get("accrued_at").isJsonNull()) && !jsonObj.get("accrued_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrued_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrued_at").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("billing_account_id") != null && !jsonObj.get("billing_account_id").isJsonNull()) && !jsonObj.get("billing_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_account_id").toString()));
      }
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("resource_id") != null && !jsonObj.get("resource_id").isJsonNull()) && !jsonObj.get("resource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_id").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("cost_category") != null && !jsonObj.get("cost_category").isJsonNull()) && !jsonObj.get("cost_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_category").toString()));
      }
      if ((jsonObj.get("cost_subcategory") != null && !jsonObj.get("cost_subcategory").isJsonNull()) && !jsonObj.get("cost_subcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_subcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_subcategory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cost.class));

       return (TypeAdapter<T>) new TypeAdapter<Cost>() {
           @Override
           public void write(JsonWriter out, Cost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Cost read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Cost instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Cost given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Cost
  * @throws IOException if the JSON string is invalid with respect to Cost
  */
  public static Cost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cost.class);
  }

 /**
  * Convert an instance of Cost to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

