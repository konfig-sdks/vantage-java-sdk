/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Folder;
import com.konfigthis.client.model.Folders;
import com.konfigthis.client.model.PostFolders;
import com.konfigthis.client.model.PutFolders;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFolderForCostReportsCall(PostFolders postFolders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postFolders;

        // create path and map variables
        String localVarPath = "/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderForCostReportsValidateBeforeCall(PostFolders postFolders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postFolders' is set
        if (postFolders == null) {
            throw new ApiException("Missing the required parameter 'postFolders' when calling createFolderForCostReports(Async)");
        }

        return createFolderForCostReportsCall(postFolders, _callback);

    }


    private ApiResponse<Folder> createFolderForCostReportsWithHttpInfo(PostFolders postFolders) throws ApiException {
        okhttp3.Call localVarCall = createFolderForCostReportsValidateBeforeCall(postFolders, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFolderForCostReportsAsync(PostFolders postFolders, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderForCostReportsValidateBeforeCall(postFolders, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFolderForCostReportsRequestBuilder {
        private final String title;
        private String parentFolderToken;
        private List<String> savedFilterTokens;
        private String workspaceToken;

        private CreateFolderForCostReportsRequestBuilder(String title) {
            this.title = title;
        }

        /**
         * Set parentFolderToken
         * @param parentFolderToken The token of the parent Folder. (optional)
         * @return CreateFolderForCostReportsRequestBuilder
         */
        public CreateFolderForCostReportsRequestBuilder parentFolderToken(String parentFolderToken) {
            this.parentFolderToken = parentFolderToken;
            return this;
        }
        
        /**
         * Set savedFilterTokens
         * @param savedFilterTokens The tokens of the SavedFilters to apply to any Cost Report contained within the Folder. (optional)
         * @return CreateFolderForCostReportsRequestBuilder
         */
        public CreateFolderForCostReportsRequestBuilder savedFilterTokens(List<String> savedFilterTokens) {
            this.savedFilterTokens = savedFilterTokens;
            return this;
        }
        
        /**
         * Set workspaceToken
         * @param workspaceToken The token of the Workspace to add the Folder to. Ignored if &#39;parent_folder_token&#39; is set. Required if the API token is associated with multiple Workspaces. (optional)
         * @return CreateFolderForCostReportsRequestBuilder
         */
        public CreateFolderForCostReportsRequestBuilder workspaceToken(String workspaceToken) {
            this.workspaceToken = workspaceToken;
            return this;
        }
        
        /**
         * Build call for createFolderForCostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostFolders postFolders = buildBodyParams();
            return createFolderForCostReportsCall(postFolders, _callback);
        }

        private PostFolders buildBodyParams() {
            PostFolders postFolders = new PostFolders();
            postFolders.title(this.title);
            postFolders.parentFolderToken(this.parentFolderToken);
            postFolders.savedFilterTokens(this.savedFilterTokens);
            postFolders.workspaceToken(this.workspaceToken);
            return postFolders;
        }

        /**
         * Execute createFolderForCostReports request
         * @return Folder
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Folder execute() throws ApiException {
            PostFolders postFolders = buildBodyParams();
            ApiResponse<Folder> localVarResp = createFolderForCostReportsWithHttpInfo(postFolders);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFolderForCostReports request with HTTP info returned
         * @return ApiResponse&lt;Folder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Folder> executeWithHttpInfo() throws ApiException {
            PostFolders postFolders = buildBodyParams();
            return createFolderForCostReportsWithHttpInfo(postFolders);
        }

        /**
         * Execute createFolderForCostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Folder> _callback) throws ApiException {
            PostFolders postFolders = buildBodyParams();
            return createFolderForCostReportsAsync(postFolders, _callback);
        }
    }

    /**
     * 
     * Create a Folder for CostReports.
     * @param postFolders  (required)
     * @return CreateFolderForCostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateFolderForCostReportsRequestBuilder createFolderForCostReports(String title) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        return new CreateFolderForCostReportsRequestBuilder(title);
    }
    private okhttp3.Call deleteFolderForCostReportsCall(String folderToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_token}"
            .replace("{" + "folder_token" + "}", localVarApiClient.escapeString(folderToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderForCostReportsValidateBeforeCall(String folderToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderToken' is set
        if (folderToken == null) {
            throw new ApiException("Missing the required parameter 'folderToken' when calling deleteFolderForCostReports(Async)");
        }

        return deleteFolderForCostReportsCall(folderToken, _callback);

    }


    private ApiResponse<Folder> deleteFolderForCostReportsWithHttpInfo(String folderToken) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderForCostReportsValidateBeforeCall(folderToken, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFolderForCostReportsAsync(String folderToken, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderForCostReportsValidateBeforeCall(folderToken, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFolderForCostReportsRequestBuilder {
        private final String folderToken;

        private DeleteFolderForCostReportsRequestBuilder(String folderToken) {
            this.folderToken = folderToken;
        }

        /**
         * Build call for deleteFolderForCostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFolderForCostReportsCall(folderToken, _callback);
        }


        /**
         * Execute deleteFolderForCostReports request
         * @return Folder
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Folder execute() throws ApiException {
            ApiResponse<Folder> localVarResp = deleteFolderForCostReportsWithHttpInfo(folderToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteFolderForCostReports request with HTTP info returned
         * @return ApiResponse&lt;Folder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Folder> executeWithHttpInfo() throws ApiException {
            return deleteFolderForCostReportsWithHttpInfo(folderToken);
        }

        /**
         * Execute deleteFolderForCostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Folder> _callback) throws ApiException {
            return deleteFolderForCostReportsAsync(folderToken, _callback);
        }
    }

    /**
     * 
     * Delete a Folder for CostReports.
     * @param folderToken  (required)
     * @return DeleteFolderForCostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFolderForCostReportsRequestBuilder deleteFolderForCostReports(String folderToken) throws IllegalArgumentException {
        if (folderToken == null) throw new IllegalArgumentException("\"folderToken\" is required but got null");
            

        return new DeleteFolderForCostReportsRequestBuilder(folderToken);
    }
    private okhttp3.Call getSpecificFolderCall(String folderToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_token}"
            .replace("{" + "folder_token" + "}", localVarApiClient.escapeString(folderToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificFolderValidateBeforeCall(String folderToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderToken' is set
        if (folderToken == null) {
            throw new ApiException("Missing the required parameter 'folderToken' when calling getSpecificFolder(Async)");
        }

        return getSpecificFolderCall(folderToken, _callback);

    }


    private ApiResponse<Folder> getSpecificFolderWithHttpInfo(String folderToken) throws ApiException {
        okhttp3.Call localVarCall = getSpecificFolderValidateBeforeCall(folderToken, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificFolderAsync(String folderToken, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificFolderValidateBeforeCall(folderToken, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificFolderRequestBuilder {
        private final String folderToken;

        private GetSpecificFolderRequestBuilder(String folderToken) {
            this.folderToken = folderToken;
        }

        /**
         * Build call for getSpecificFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificFolderCall(folderToken, _callback);
        }


        /**
         * Execute getSpecificFolder request
         * @return Folder
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Folder execute() throws ApiException {
            ApiResponse<Folder> localVarResp = getSpecificFolderWithHttpInfo(folderToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificFolder request with HTTP info returned
         * @return ApiResponse&lt;Folder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Folder> executeWithHttpInfo() throws ApiException {
            return getSpecificFolderWithHttpInfo(folderToken);
        }

        /**
         * Execute getSpecificFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Folder> _callback) throws ApiException {
            return getSpecificFolderAsync(folderToken, _callback);
        }
    }

    /**
     * 
     * Return a specific Folder for CostReports.
     * @param folderToken  (required)
     * @return GetSpecificFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificFolderRequestBuilder getSpecificFolder(String folderToken) throws IllegalArgumentException {
        if (folderToken == null) throw new IllegalArgumentException("\"folderToken\" is required but got null");
            

        return new GetSpecificFolderRequestBuilder(folderToken);
    }
    private okhttp3.Call listCostReportsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCostReportsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCostReportsCall(page, limit, _callback);

    }


    private ApiResponse<Folders> listCostReportsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listCostReportsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<Folders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCostReportsAsync(Integer page, Integer limit, final ApiCallback<Folders> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCostReportsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<Folders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCostReportsRequestBuilder {
        private Integer page;
        private Integer limit;

        private ListCostReportsRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return ListCostReportsRequestBuilder
         */
        public ListCostReportsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return ListCostReportsRequestBuilder
         */
        public ListCostReportsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listCostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCostReportsCall(page, limit, _callback);
        }


        /**
         * Execute listCostReports request
         * @return Folders
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Folders execute() throws ApiException {
            ApiResponse<Folders> localVarResp = listCostReportsWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCostReports request with HTTP info returned
         * @return ApiResponse&lt;Folders&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Folders> executeWithHttpInfo() throws ApiException {
            return listCostReportsWithHttpInfo(page, limit);
        }

        /**
         * Execute listCostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Folders> _callback) throws ApiException {
            return listCostReportsAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all Folders for CostReports.
     * @return ListCostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListCostReportsRequestBuilder listCostReports() throws IllegalArgumentException {
        return new ListCostReportsRequestBuilder();
    }
    private okhttp3.Call updateFolderForCostReportsCall(String folderToken, PutFolders putFolders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putFolders;

        // create path and map variables
        String localVarPath = "/folders/{folder_token}"
            .replace("{" + "folder_token" + "}", localVarApiClient.escapeString(folderToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFolderForCostReportsValidateBeforeCall(String folderToken, PutFolders putFolders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderToken' is set
        if (folderToken == null) {
            throw new ApiException("Missing the required parameter 'folderToken' when calling updateFolderForCostReports(Async)");
        }

        // verify the required parameter 'putFolders' is set
        if (putFolders == null) {
            throw new ApiException("Missing the required parameter 'putFolders' when calling updateFolderForCostReports(Async)");
        }

        return updateFolderForCostReportsCall(folderToken, putFolders, _callback);

    }


    private ApiResponse<Folder> updateFolderForCostReportsWithHttpInfo(String folderToken, PutFolders putFolders) throws ApiException {
        okhttp3.Call localVarCall = updateFolderForCostReportsValidateBeforeCall(folderToken, putFolders, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFolderForCostReportsAsync(String folderToken, PutFolders putFolders, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFolderForCostReportsValidateBeforeCall(folderToken, putFolders, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFolderForCostReportsRequestBuilder {
        private final String folderToken;
        private String title;
        private String parentFolderToken;
        private List<String> savedFilterTokens;

        private UpdateFolderForCostReportsRequestBuilder(String folderToken) {
            this.folderToken = folderToken;
        }

        /**
         * Set title
         * @param title The title of the Folder. (optional)
         * @return UpdateFolderForCostReportsRequestBuilder
         */
        public UpdateFolderForCostReportsRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set parentFolderToken
         * @param parentFolderToken The token of the parent Folder. (optional)
         * @return UpdateFolderForCostReportsRequestBuilder
         */
        public UpdateFolderForCostReportsRequestBuilder parentFolderToken(String parentFolderToken) {
            this.parentFolderToken = parentFolderToken;
            return this;
        }
        
        /**
         * Set savedFilterTokens
         * @param savedFilterTokens The tokens of the SavedFilters to apply to any Cost Report contained within the Folder. (optional)
         * @return UpdateFolderForCostReportsRequestBuilder
         */
        public UpdateFolderForCostReportsRequestBuilder savedFilterTokens(List<String> savedFilterTokens) {
            this.savedFilterTokens = savedFilterTokens;
            return this;
        }
        
        /**
         * Build call for updateFolderForCostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutFolders putFolders = buildBodyParams();
            return updateFolderForCostReportsCall(folderToken, putFolders, _callback);
        }

        private PutFolders buildBodyParams() {
            PutFolders putFolders = new PutFolders();
            putFolders.title(this.title);
            putFolders.parentFolderToken(this.parentFolderToken);
            putFolders.savedFilterTokens(this.savedFilterTokens);
            return putFolders;
        }

        /**
         * Execute updateFolderForCostReports request
         * @return Folder
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Folder execute() throws ApiException {
            PutFolders putFolders = buildBodyParams();
            ApiResponse<Folder> localVarResp = updateFolderForCostReportsWithHttpInfo(folderToken, putFolders);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFolderForCostReports request with HTTP info returned
         * @return ApiResponse&lt;Folder&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Folder> executeWithHttpInfo() throws ApiException {
            PutFolders putFolders = buildBodyParams();
            return updateFolderForCostReportsWithHttpInfo(folderToken, putFolders);
        }

        /**
         * Execute updateFolderForCostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Folder> _callback) throws ApiException {
            PutFolders putFolders = buildBodyParams();
            return updateFolderForCostReportsAsync(folderToken, putFolders, _callback);
        }
    }

    /**
     * 
     * Update a Folder for CostReports.
     * @param folderToken  (required)
     * @param putFolders  (required)
     * @return UpdateFolderForCostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFolderForCostReportsRequestBuilder updateFolderForCostReports(String folderToken) throws IllegalArgumentException {
        if (folderToken == null) throw new IllegalArgumentException("\"folderToken\" is required but got null");
            

        return new UpdateFolderForCostReportsRequestBuilder(folderToken);
    }
}
