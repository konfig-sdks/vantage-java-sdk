/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostSegments;
import com.konfigthis.client.model.PostSegmentsReportSettings;
import com.konfigthis.client.model.PutSegments;
import com.konfigthis.client.model.Segment;
import com.konfigthis.client.model.Segments;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SegmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SegmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SegmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSegmentCall(PostSegments postSegments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postSegments;

        // create path and map variables
        String localVarPath = "/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSegmentValidateBeforeCall(PostSegments postSegments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postSegments' is set
        if (postSegments == null) {
            throw new ApiException("Missing the required parameter 'postSegments' when calling createSegment(Async)");
        }

        return createSegmentCall(postSegments, _callback);

    }


    private ApiResponse<Segment> createSegmentWithHttpInfo(PostSegments postSegments) throws ApiException {
        okhttp3.Call localVarCall = createSegmentValidateBeforeCall(postSegments, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSegmentAsync(PostSegments postSegments, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSegmentValidateBeforeCall(postSegments, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSegmentRequestBuilder {
        private final String title;
        private String description;
        private Integer priority;
        private Boolean trackUnallocated;
        private PostSegmentsReportSettings reportSettings;
        private String workspaceToken;
        private String filter;
        private String parentSegmentToken;

        private CreateSegmentRequestBuilder(String title) {
            this.title = title;
        }

        /**
         * Set description
         * @param description The description of the Segment. (optional)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set priority
         * @param priority The priority of the Segment. (optional)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set trackUnallocated
         * @param trackUnallocated Track Unallocated Costs which are not assigned to any of the created Segments. (optional, default to false)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder trackUnallocated(Boolean trackUnallocated) {
            this.trackUnallocated = trackUnallocated;
            return this;
        }
        
        /**
         * Set reportSettings
         * @param reportSettings  (optional)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder reportSettings(PostSegmentsReportSettings reportSettings) {
            this.reportSettings = reportSettings;
            return this;
        }
        
        /**
         * Set workspaceToken
         * @param workspaceToken The token of the Workspace to add the Segment to. Ignored if &#39;segment_token&#39; is set. Required if the API token is associated with multiple Workspaces. (optional)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder workspaceToken(String workspaceToken) {
            this.workspaceToken = workspaceToken;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql. (optional)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set parentSegmentToken
         * @param parentSegmentToken The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to. (optional)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder parentSegmentToken(String parentSegmentToken) {
            this.parentSegmentToken = parentSegmentToken;
            return this;
        }
        
        /**
         * Build call for createSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostSegments postSegments = buildBodyParams();
            return createSegmentCall(postSegments, _callback);
        }

        private PostSegments buildBodyParams() {
            PostSegments postSegments = new PostSegments();
            postSegments.title(this.title);
            postSegments.description(this.description);
            postSegments.priority(this.priority);
            postSegments.trackUnallocated(this.trackUnallocated);
            postSegments.reportSettings(this.reportSettings);
            postSegments.workspaceToken(this.workspaceToken);
            postSegments.filter(this.filter);
            postSegments.parentSegmentToken(this.parentSegmentToken);
            return postSegments;
        }

        /**
         * Execute createSegment request
         * @return Segment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Segment execute() throws ApiException {
            PostSegments postSegments = buildBodyParams();
            ApiResponse<Segment> localVarResp = createSegmentWithHttpInfo(postSegments);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSegment request with HTTP info returned
         * @return ApiResponse&lt;Segment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Segment> executeWithHttpInfo() throws ApiException {
            PostSegments postSegments = buildBodyParams();
            return createSegmentWithHttpInfo(postSegments);
        }

        /**
         * Execute createSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Segment> _callback) throws ApiException {
            PostSegments postSegments = buildBodyParams();
            return createSegmentAsync(postSegments, _callback);
        }
    }

    /**
     * 
     * Create a Segment.
     * @param postSegments  (required)
     * @return CreateSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateSegmentRequestBuilder createSegment(String title) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        return new CreateSegmentRequestBuilder(title);
    }
    private okhttp3.Call getSegmentByIdCall(String segmentToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/segments/{segment_token}"
            .replace("{" + "segment_token" + "}", localVarApiClient.escapeString(segmentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSegmentByIdValidateBeforeCall(String segmentToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'segmentToken' is set
        if (segmentToken == null) {
            throw new ApiException("Missing the required parameter 'segmentToken' when calling getSegmentById(Async)");
        }

        return getSegmentByIdCall(segmentToken, _callback);

    }


    private ApiResponse<Segment> getSegmentByIdWithHttpInfo(String segmentToken) throws ApiException {
        okhttp3.Call localVarCall = getSegmentByIdValidateBeforeCall(segmentToken, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSegmentByIdAsync(String segmentToken, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSegmentByIdValidateBeforeCall(segmentToken, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSegmentByIdRequestBuilder {
        private final String segmentToken;

        private GetSegmentByIdRequestBuilder(String segmentToken) {
            this.segmentToken = segmentToken;
        }

        /**
         * Build call for getSegmentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSegmentByIdCall(segmentToken, _callback);
        }


        /**
         * Execute getSegmentById request
         * @return Segment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Segment execute() throws ApiException {
            ApiResponse<Segment> localVarResp = getSegmentByIdWithHttpInfo(segmentToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSegmentById request with HTTP info returned
         * @return ApiResponse&lt;Segment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Segment> executeWithHttpInfo() throws ApiException {
            return getSegmentByIdWithHttpInfo(segmentToken);
        }

        /**
         * Execute getSegmentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Segment> _callback) throws ApiException {
            return getSegmentByIdAsync(segmentToken, _callback);
        }
    }

    /**
     * 
     * Return a Segment.
     * @param segmentToken  (required)
     * @return GetSegmentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSegmentByIdRequestBuilder getSegmentById(String segmentToken) throws IllegalArgumentException {
        if (segmentToken == null) throw new IllegalArgumentException("\"segmentToken\" is required but got null");
            

        return new GetSegmentByIdRequestBuilder(segmentToken);
    }
    private okhttp3.Call listCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCall(page, limit, _callback);

    }


    private ApiResponse<Segments> listWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<Segments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer page, Integer limit, final ApiCallback<Segments> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<Segments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer page;
        private Integer limit;

        private ListRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(page, limit, _callback);
        }


        /**
         * Execute list request
         * @return Segments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Segments execute() throws ApiException {
            ApiResponse<Segments> localVarResp = listWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;Segments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Segments> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(page, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Segments> _callback) throws ApiException {
            return listAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all Segments.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call removeSegmentCall(String segmentToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/segments/{segment_token}"
            .replace("{" + "segment_token" + "}", localVarApiClient.escapeString(segmentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSegmentValidateBeforeCall(String segmentToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'segmentToken' is set
        if (segmentToken == null) {
            throw new ApiException("Missing the required parameter 'segmentToken' when calling removeSegment(Async)");
        }

        return removeSegmentCall(segmentToken, _callback);

    }


    private ApiResponse<Segment> removeSegmentWithHttpInfo(String segmentToken) throws ApiException {
        okhttp3.Call localVarCall = removeSegmentValidateBeforeCall(segmentToken, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSegmentAsync(String segmentToken, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSegmentValidateBeforeCall(segmentToken, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSegmentRequestBuilder {
        private final String segmentToken;

        private RemoveSegmentRequestBuilder(String segmentToken) {
            this.segmentToken = segmentToken;
        }

        /**
         * Build call for removeSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSegmentCall(segmentToken, _callback);
        }


        /**
         * Execute removeSegment request
         * @return Segment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Segment execute() throws ApiException {
            ApiResponse<Segment> localVarResp = removeSegmentWithHttpInfo(segmentToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSegment request with HTTP info returned
         * @return ApiResponse&lt;Segment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Segment> executeWithHttpInfo() throws ApiException {
            return removeSegmentWithHttpInfo(segmentToken);
        }

        /**
         * Execute removeSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Segment> _callback) throws ApiException {
            return removeSegmentAsync(segmentToken, _callback);
        }
    }

    /**
     * 
     * Delete a Segment.
     * @param segmentToken  (required)
     * @return RemoveSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSegmentRequestBuilder removeSegment(String segmentToken) throws IllegalArgumentException {
        if (segmentToken == null) throw new IllegalArgumentException("\"segmentToken\" is required but got null");
            

        return new RemoveSegmentRequestBuilder(segmentToken);
    }
    private okhttp3.Call updateSegmentByIdCall(String segmentToken, PutSegments putSegments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putSegments;

        // create path and map variables
        String localVarPath = "/segments/{segment_token}"
            .replace("{" + "segment_token" + "}", localVarApiClient.escapeString(segmentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSegmentByIdValidateBeforeCall(String segmentToken, PutSegments putSegments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'segmentToken' is set
        if (segmentToken == null) {
            throw new ApiException("Missing the required parameter 'segmentToken' when calling updateSegmentById(Async)");
        }

        // verify the required parameter 'putSegments' is set
        if (putSegments == null) {
            throw new ApiException("Missing the required parameter 'putSegments' when calling updateSegmentById(Async)");
        }

        return updateSegmentByIdCall(segmentToken, putSegments, _callback);

    }


    private ApiResponse<Segment> updateSegmentByIdWithHttpInfo(String segmentToken, PutSegments putSegments) throws ApiException {
        okhttp3.Call localVarCall = updateSegmentByIdValidateBeforeCall(segmentToken, putSegments, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSegmentByIdAsync(String segmentToken, PutSegments putSegments, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSegmentByIdValidateBeforeCall(segmentToken, putSegments, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSegmentByIdRequestBuilder {
        private final String segmentToken;
        private String title;
        private String description;
        private Integer priority;
        private Boolean trackUnallocated;
        private PostSegmentsReportSettings reportSettings;
        private String filter;
        private String parentSegmentToken;

        private UpdateSegmentByIdRequestBuilder(String segmentToken) {
            this.segmentToken = segmentToken;
        }

        /**
         * Set title
         * @param title The title of the Segment. (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description The description of the Segment. (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set priority
         * @param priority The priority of the Segment. (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set trackUnallocated
         * @param trackUnallocated Track Unallocated Costs which are not assigned to any of the created Segments. (optional, default to false)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder trackUnallocated(Boolean trackUnallocated) {
            this.trackUnallocated = trackUnallocated;
            return this;
        }
        
        /**
         * Set reportSettings
         * @param reportSettings  (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder reportSettings(PostSegmentsReportSettings reportSettings) {
            this.reportSettings = reportSettings;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql. (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set parentSegmentToken
         * @param parentSegmentToken The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to. (optional)
         * @return UpdateSegmentByIdRequestBuilder
         */
        public UpdateSegmentByIdRequestBuilder parentSegmentToken(String parentSegmentToken) {
            this.parentSegmentToken = parentSegmentToken;
            return this;
        }
        
        /**
         * Build call for updateSegmentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutSegments putSegments = buildBodyParams();
            return updateSegmentByIdCall(segmentToken, putSegments, _callback);
        }

        private PutSegments buildBodyParams() {
            PutSegments putSegments = new PutSegments();
            putSegments.title(this.title);
            putSegments.description(this.description);
            putSegments.priority(this.priority);
            putSegments.trackUnallocated(this.trackUnallocated);
            putSegments.reportSettings(this.reportSettings);
            putSegments.filter(this.filter);
            putSegments.parentSegmentToken(this.parentSegmentToken);
            return putSegments;
        }

        /**
         * Execute updateSegmentById request
         * @return Segment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Segment execute() throws ApiException {
            PutSegments putSegments = buildBodyParams();
            ApiResponse<Segment> localVarResp = updateSegmentByIdWithHttpInfo(segmentToken, putSegments);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSegmentById request with HTTP info returned
         * @return ApiResponse&lt;Segment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Segment> executeWithHttpInfo() throws ApiException {
            PutSegments putSegments = buildBodyParams();
            return updateSegmentByIdWithHttpInfo(segmentToken, putSegments);
        }

        /**
         * Execute updateSegmentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Segment> _callback) throws ApiException {
            PutSegments putSegments = buildBodyParams();
            return updateSegmentByIdAsync(segmentToken, putSegments, _callback);
        }
    }

    /**
     * 
     * Update a Segment.
     * @param segmentToken  (required)
     * @param putSegments  (required)
     * @return UpdateSegmentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSegmentByIdRequestBuilder updateSegmentById(String segmentToken) throws IllegalArgumentException {
        if (segmentToken == null) throw new IllegalArgumentException("\"segmentToken\" is required but got null");
            

        return new UpdateSegmentByIdRequestBuilder(segmentToken);
    }
}
