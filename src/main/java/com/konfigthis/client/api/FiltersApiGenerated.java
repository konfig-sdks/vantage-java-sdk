/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostSavedFilters;
import com.konfigthis.client.model.PutSavedFilters;
import com.konfigthis.client.model.SavedFilter;
import com.konfigthis.client.model.SavedFilters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FiltersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FiltersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FiltersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSavedFilterForCostReportsCall(PostSavedFilters postSavedFilters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postSavedFilters;

        // create path and map variables
        String localVarPath = "/saved_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSavedFilterForCostReportsValidateBeforeCall(PostSavedFilters postSavedFilters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postSavedFilters' is set
        if (postSavedFilters == null) {
            throw new ApiException("Missing the required parameter 'postSavedFilters' when calling createSavedFilterForCostReports(Async)");
        }

        return createSavedFilterForCostReportsCall(postSavedFilters, _callback);

    }


    private ApiResponse<SavedFilter> createSavedFilterForCostReportsWithHttpInfo(PostSavedFilters postSavedFilters) throws ApiException {
        okhttp3.Call localVarCall = createSavedFilterForCostReportsValidateBeforeCall(postSavedFilters, null);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSavedFilterForCostReportsAsync(PostSavedFilters postSavedFilters, final ApiCallback<SavedFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSavedFilterForCostReportsValidateBeforeCall(postSavedFilters, _callback);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSavedFilterForCostReportsRequestBuilder {
        private final String title;
        private String workspaceToken;
        private String filter;

        private CreateSavedFilterForCostReportsRequestBuilder(String title) {
            this.title = title;
        }

        /**
         * Set workspaceToken
         * @param workspaceToken The Workspace to associate the SavedFilter with. Required if the API token is associated with multiple Workspaces. (optional)
         * @return CreateSavedFilterForCostReportsRequestBuilder
         */
        public CreateSavedFilterForCostReportsRequestBuilder workspaceToken(String workspaceToken) {
            this.workspaceToken = workspaceToken;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The filter query language to apply to the SavedFilter, which subsequently gets applied to a CostReport. Additional documentation available at https://docs.vantage.sh/vql. (optional)
         * @return CreateSavedFilterForCostReportsRequestBuilder
         */
        public CreateSavedFilterForCostReportsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for createSavedFilterForCostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostSavedFilters postSavedFilters = buildBodyParams();
            return createSavedFilterForCostReportsCall(postSavedFilters, _callback);
        }

        private PostSavedFilters buildBodyParams() {
            PostSavedFilters postSavedFilters = new PostSavedFilters();
            postSavedFilters.title(this.title);
            postSavedFilters.workspaceToken(this.workspaceToken);
            postSavedFilters.filter(this.filter);
            return postSavedFilters;
        }

        /**
         * Execute createSavedFilterForCostReports request
         * @return SavedFilter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public SavedFilter execute() throws ApiException {
            PostSavedFilters postSavedFilters = buildBodyParams();
            ApiResponse<SavedFilter> localVarResp = createSavedFilterForCostReportsWithHttpInfo(postSavedFilters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSavedFilterForCostReports request with HTTP info returned
         * @return ApiResponse&lt;SavedFilter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SavedFilter> executeWithHttpInfo() throws ApiException {
            PostSavedFilters postSavedFilters = buildBodyParams();
            return createSavedFilterForCostReportsWithHttpInfo(postSavedFilters);
        }

        /**
         * Execute createSavedFilterForCostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SavedFilter> _callback) throws ApiException {
            PostSavedFilters postSavedFilters = buildBodyParams();
            return createSavedFilterForCostReportsAsync(postSavedFilters, _callback);
        }
    }

    /**
     * 
     * Create a SavedFilter for CostReports.
     * @param postSavedFilters  (required)
     * @return CreateSavedFilterForCostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateSavedFilterForCostReportsRequestBuilder createSavedFilterForCostReports(String title) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        return new CreateSavedFilterForCostReportsRequestBuilder(title);
    }
    private okhttp3.Call deleteSavedFilterCall(String savedFilterToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saved_filters/{saved_filter_token}"
            .replace("{" + "saved_filter_token" + "}", localVarApiClient.escapeString(savedFilterToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSavedFilterValidateBeforeCall(String savedFilterToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'savedFilterToken' is set
        if (savedFilterToken == null) {
            throw new ApiException("Missing the required parameter 'savedFilterToken' when calling deleteSavedFilter(Async)");
        }

        return deleteSavedFilterCall(savedFilterToken, _callback);

    }


    private ApiResponse<SavedFilter> deleteSavedFilterWithHttpInfo(String savedFilterToken) throws ApiException {
        okhttp3.Call localVarCall = deleteSavedFilterValidateBeforeCall(savedFilterToken, null);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSavedFilterAsync(String savedFilterToken, final ApiCallback<SavedFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSavedFilterValidateBeforeCall(savedFilterToken, _callback);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSavedFilterRequestBuilder {
        private final String savedFilterToken;

        private DeleteSavedFilterRequestBuilder(String savedFilterToken) {
            this.savedFilterToken = savedFilterToken;
        }

        /**
         * Build call for deleteSavedFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSavedFilterCall(savedFilterToken, _callback);
        }


        /**
         * Execute deleteSavedFilter request
         * @return SavedFilter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public SavedFilter execute() throws ApiException {
            ApiResponse<SavedFilter> localVarResp = deleteSavedFilterWithHttpInfo(savedFilterToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSavedFilter request with HTTP info returned
         * @return ApiResponse&lt;SavedFilter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SavedFilter> executeWithHttpInfo() throws ApiException {
            return deleteSavedFilterWithHttpInfo(savedFilterToken);
        }

        /**
         * Execute deleteSavedFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SavedFilter> _callback) throws ApiException {
            return deleteSavedFilterAsync(savedFilterToken, _callback);
        }
    }

    /**
     * 
     * Delete a SavedFilter for CostReports.
     * @param savedFilterToken  (required)
     * @return DeleteSavedFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSavedFilterRequestBuilder deleteSavedFilter(String savedFilterToken) throws IllegalArgumentException {
        if (savedFilterToken == null) throw new IllegalArgumentException("\"savedFilterToken\" is required but got null");
            

        return new DeleteSavedFilterRequestBuilder(savedFilterToken);
    }
    private okhttp3.Call getCostReportFiltersCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saved_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCostReportFiltersValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getCostReportFiltersCall(page, limit, _callback);

    }


    private ApiResponse<SavedFilters> getCostReportFiltersWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getCostReportFiltersValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<SavedFilters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCostReportFiltersAsync(Integer page, Integer limit, final ApiCallback<SavedFilters> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCostReportFiltersValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<SavedFilters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCostReportFiltersRequestBuilder {
        private Integer page;
        private Integer limit;

        private GetCostReportFiltersRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return GetCostReportFiltersRequestBuilder
         */
        public GetCostReportFiltersRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return GetCostReportFiltersRequestBuilder
         */
        public GetCostReportFiltersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getCostReportFilters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCostReportFiltersCall(page, limit, _callback);
        }


        /**
         * Execute getCostReportFilters request
         * @return SavedFilters
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public SavedFilters execute() throws ApiException {
            ApiResponse<SavedFilters> localVarResp = getCostReportFiltersWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCostReportFilters request with HTTP info returned
         * @return ApiResponse&lt;SavedFilters&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SavedFilters> executeWithHttpInfo() throws ApiException {
            return getCostReportFiltersWithHttpInfo(page, limit);
        }

        /**
         * Execute getCostReportFilters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SavedFilters> _callback) throws ApiException {
            return getCostReportFiltersAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all SavedFilters that can be applied to a CostReport.
     * @return GetCostReportFiltersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCostReportFiltersRequestBuilder getCostReportFilters() throws IllegalArgumentException {
        return new GetCostReportFiltersRequestBuilder();
    }
    private okhttp3.Call getSavedFilterCall(String savedFilterToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saved_filters/{saved_filter_token}"
            .replace("{" + "saved_filter_token" + "}", localVarApiClient.escapeString(savedFilterToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedFilterValidateBeforeCall(String savedFilterToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'savedFilterToken' is set
        if (savedFilterToken == null) {
            throw new ApiException("Missing the required parameter 'savedFilterToken' when calling getSavedFilter(Async)");
        }

        return getSavedFilterCall(savedFilterToken, _callback);

    }


    private ApiResponse<SavedFilter> getSavedFilterWithHttpInfo(String savedFilterToken) throws ApiException {
        okhttp3.Call localVarCall = getSavedFilterValidateBeforeCall(savedFilterToken, null);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSavedFilterAsync(String savedFilterToken, final ApiCallback<SavedFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedFilterValidateBeforeCall(savedFilterToken, _callback);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSavedFilterRequestBuilder {
        private final String savedFilterToken;

        private GetSavedFilterRequestBuilder(String savedFilterToken) {
            this.savedFilterToken = savedFilterToken;
        }

        /**
         * Build call for getSavedFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSavedFilterCall(savedFilterToken, _callback);
        }


        /**
         * Execute getSavedFilter request
         * @return SavedFilter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public SavedFilter execute() throws ApiException {
            ApiResponse<SavedFilter> localVarResp = getSavedFilterWithHttpInfo(savedFilterToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSavedFilter request with HTTP info returned
         * @return ApiResponse&lt;SavedFilter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SavedFilter> executeWithHttpInfo() throws ApiException {
            return getSavedFilterWithHttpInfo(savedFilterToken);
        }

        /**
         * Execute getSavedFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SavedFilter> _callback) throws ApiException {
            return getSavedFilterAsync(savedFilterToken, _callback);
        }
    }

    /**
     * 
     * Return a specific SavedFilter.
     * @param savedFilterToken  (required)
     * @return GetSavedFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSavedFilterRequestBuilder getSavedFilter(String savedFilterToken) throws IllegalArgumentException {
        if (savedFilterToken == null) throw new IllegalArgumentException("\"savedFilterToken\" is required but got null");
            

        return new GetSavedFilterRequestBuilder(savedFilterToken);
    }
    private okhttp3.Call updateSavedFilterForCostReportsCall(String savedFilterToken, PutSavedFilters putSavedFilters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putSavedFilters;

        // create path and map variables
        String localVarPath = "/saved_filters/{saved_filter_token}"
            .replace("{" + "saved_filter_token" + "}", localVarApiClient.escapeString(savedFilterToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSavedFilterForCostReportsValidateBeforeCall(String savedFilterToken, PutSavedFilters putSavedFilters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'savedFilterToken' is set
        if (savedFilterToken == null) {
            throw new ApiException("Missing the required parameter 'savedFilterToken' when calling updateSavedFilterForCostReports(Async)");
        }

        // verify the required parameter 'putSavedFilters' is set
        if (putSavedFilters == null) {
            throw new ApiException("Missing the required parameter 'putSavedFilters' when calling updateSavedFilterForCostReports(Async)");
        }

        return updateSavedFilterForCostReportsCall(savedFilterToken, putSavedFilters, _callback);

    }


    private ApiResponse<SavedFilter> updateSavedFilterForCostReportsWithHttpInfo(String savedFilterToken, PutSavedFilters putSavedFilters) throws ApiException {
        okhttp3.Call localVarCall = updateSavedFilterForCostReportsValidateBeforeCall(savedFilterToken, putSavedFilters, null);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSavedFilterForCostReportsAsync(String savedFilterToken, PutSavedFilters putSavedFilters, final ApiCallback<SavedFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSavedFilterForCostReportsValidateBeforeCall(savedFilterToken, putSavedFilters, _callback);
        Type localVarReturnType = new TypeToken<SavedFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSavedFilterForCostReportsRequestBuilder {
        private final String savedFilterToken;
        private String title;
        private String filter;

        private UpdateSavedFilterForCostReportsRequestBuilder(String savedFilterToken) {
            this.savedFilterToken = savedFilterToken;
        }

        /**
         * Set title
         * @param title The title of the SavedFilter. (optional)
         * @return UpdateSavedFilterForCostReportsRequestBuilder
         */
        public UpdateSavedFilterForCostReportsRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The filter query language to apply to the SavedFilter, which subsequently gets applied to a CostReport. Additional documentation available at https://docs.vantage.sh/vql. (optional)
         * @return UpdateSavedFilterForCostReportsRequestBuilder
         */
        public UpdateSavedFilterForCostReportsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for updateSavedFilterForCostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutSavedFilters putSavedFilters = buildBodyParams();
            return updateSavedFilterForCostReportsCall(savedFilterToken, putSavedFilters, _callback);
        }

        private PutSavedFilters buildBodyParams() {
            PutSavedFilters putSavedFilters = new PutSavedFilters();
            putSavedFilters.title(this.title);
            putSavedFilters.filter(this.filter);
            return putSavedFilters;
        }

        /**
         * Execute updateSavedFilterForCostReports request
         * @return SavedFilter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public SavedFilter execute() throws ApiException {
            PutSavedFilters putSavedFilters = buildBodyParams();
            ApiResponse<SavedFilter> localVarResp = updateSavedFilterForCostReportsWithHttpInfo(savedFilterToken, putSavedFilters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSavedFilterForCostReports request with HTTP info returned
         * @return ApiResponse&lt;SavedFilter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SavedFilter> executeWithHttpInfo() throws ApiException {
            PutSavedFilters putSavedFilters = buildBodyParams();
            return updateSavedFilterForCostReportsWithHttpInfo(savedFilterToken, putSavedFilters);
        }

        /**
         * Execute updateSavedFilterForCostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SavedFilter> _callback) throws ApiException {
            PutSavedFilters putSavedFilters = buildBodyParams();
            return updateSavedFilterForCostReportsAsync(savedFilterToken, putSavedFilters, _callback);
        }
    }

    /**
     * 
     * Update a SavedFilter for CostReports.
     * @param savedFilterToken  (required)
     * @param putSavedFilters  (required)
     * @return UpdateSavedFilterForCostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSavedFilterForCostReportsRequestBuilder updateSavedFilterForCostReports(String savedFilterToken) throws IllegalArgumentException {
        if (savedFilterToken == null) throw new IllegalArgumentException("\"savedFilterToken\" is required but got null");
            

        return new UpdateSavedFilterForCostReportsRequestBuilder(savedFilterToken);
    }
}
