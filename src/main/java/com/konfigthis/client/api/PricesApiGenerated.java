/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Price;
import com.konfigthis.client.model.Prices;
import com.konfigthis.client.model.Product;
import com.konfigthis.client.model.Products;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PricesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PricesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PricesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getProductCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProduct(Async)");
        }

        return getProductCall(id, _callback);

    }


    private ApiResponse<Product> getProductWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getProductValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProductAsync(String id, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProductRequestBuilder {
        private final String id;

        private GetProductRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getProduct
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProductCall(id, _callback);
        }


        /**
         * Execute getProduct request
         * @return Product
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Product execute() throws ApiException {
            ApiResponse<Product> localVarResp = getProductWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProduct request with HTTP info returned
         * @return ApiResponse&lt;Product&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Product> executeWithHttpInfo() throws ApiException {
            return getProductWithHttpInfo(id);
        }

        /**
         * Execute getProduct request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Product> _callback) throws ApiException {
            return getProductAsync(id, _callback);
        }
    }

    /**
     * 
     * Return a product
     * @param id  (required)
     * @return GetProductRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetProductRequestBuilder getProduct(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetProductRequestBuilder(id);
    }
    private okhttp3.Call getProductPriceCall(String productId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{product_id}/prices/{id}"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductPriceValidateBeforeCall(String productId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductPrice(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProductPrice(Async)");
        }

        return getProductPriceCall(productId, id, _callback);

    }


    private ApiResponse<Price> getProductPriceWithHttpInfo(String productId, String id) throws ApiException {
        okhttp3.Call localVarCall = getProductPriceValidateBeforeCall(productId, id, null);
        Type localVarReturnType = new TypeToken<Price>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProductPriceAsync(String productId, String id, final ApiCallback<Price> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductPriceValidateBeforeCall(productId, id, _callback);
        Type localVarReturnType = new TypeToken<Price>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProductPriceRequestBuilder {
        private final String productId;
        private final String id;

        private GetProductPriceRequestBuilder(String productId, String id) {
            this.productId = productId;
            this.id = id;
        }

        /**
         * Build call for getProductPrice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProductPriceCall(productId, id, _callback);
        }


        /**
         * Execute getProductPrice request
         * @return Price
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Price execute() throws ApiException {
            ApiResponse<Price> localVarResp = getProductPriceWithHttpInfo(productId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProductPrice request with HTTP info returned
         * @return ApiResponse&lt;Price&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Price> executeWithHttpInfo() throws ApiException {
            return getProductPriceWithHttpInfo(productId, id);
        }

        /**
         * Execute getProductPrice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Price> _callback) throws ApiException {
            return getProductPriceAsync(productId, id, _callback);
        }
    }

    /**
     * 
     * Returns a price
     * @param productId  (required)
     * @param id  (required)
     * @return GetProductPriceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetProductPriceRequestBuilder getProductPrice(String productId, String id) throws IllegalArgumentException {
        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetProductPriceRequestBuilder(productId, id);
    }
    private okhttp3.Call getProductPricesCall(String productId, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{product_id}/prices"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductPricesValidateBeforeCall(String productId, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductPrices(Async)");
        }

        return getProductPricesCall(productId, page, limit, _callback);

    }


    private ApiResponse<Prices> getProductPricesWithHttpInfo(String productId, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getProductPricesValidateBeforeCall(productId, page, limit, null);
        Type localVarReturnType = new TypeToken<Prices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProductPricesAsync(String productId, Integer page, Integer limit, final ApiCallback<Prices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductPricesValidateBeforeCall(productId, page, limit, _callback);
        Type localVarReturnType = new TypeToken<Prices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProductPricesRequestBuilder {
        private final String productId;
        private Integer page;
        private Integer limit;

        private GetProductPricesRequestBuilder(String productId) {
            this.productId = productId;
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return GetProductPricesRequestBuilder
         */
        public GetProductPricesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000 (optional)
         * @return GetProductPricesRequestBuilder
         */
        public GetProductPricesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getProductPrices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProductPricesCall(productId, page, limit, _callback);
        }


        /**
         * Execute getProductPrices request
         * @return Prices
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Prices execute() throws ApiException {
            ApiResponse<Prices> localVarResp = getProductPricesWithHttpInfo(productId, page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProductPrices request with HTTP info returned
         * @return ApiResponse&lt;Prices&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Prices> executeWithHttpInfo() throws ApiException {
            return getProductPricesWithHttpInfo(productId, page, limit);
        }

        /**
         * Execute getProductPrices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Prices> _callback) throws ApiException {
            return getProductPricesAsync(productId, page, limit, _callback);
        }
    }

    /**
     * 
     * Return available Prices across all Regions for a Product.
     * @param productId  (required)
     * @return GetProductPricesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetProductPricesRequestBuilder getProductPrices(String productId) throws IllegalArgumentException {
        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new GetProductPricesRequestBuilder(productId);
    }
    private okhttp3.Call listAvailableProductsCall(String providerId, String serviceId, String name, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_id", providerId));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id", serviceId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableProductsValidateBeforeCall(String providerId, String serviceId, String name, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return listAvailableProductsCall(providerId, serviceId, name, page, limit, _callback);

    }


    private ApiResponse<Products> listAvailableProductsWithHttpInfo(String providerId, String serviceId, String name, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAvailableProductsValidateBeforeCall(providerId, serviceId, name, page, limit, null);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableProductsAsync(String providerId, String serviceId, String name, Integer page, Integer limit, final ApiCallback<Products> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableProductsValidateBeforeCall(providerId, serviceId, name, page, limit, _callback);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableProductsRequestBuilder {
        private String providerId;
        private String serviceId;
        private String name;
        private Integer page;
        private Integer limit;

        private ListAvailableProductsRequestBuilder() {
        }

        /**
         * Set providerId
         * @param providerId Query by Provider to list all Products across all Services for a Provider. e.g. aws (optional)
         * @return ListAvailableProductsRequestBuilder
         */
        public ListAvailableProductsRequestBuilder providerId(String providerId) {
            this.providerId = providerId;
            return this;
        }
        
        /**
         * Set serviceId
         * @param serviceId Query by Service to list all Products for a specific provider service. e.g. aws-ec2 (optional)
         * @return ListAvailableProductsRequestBuilder
         */
        public ListAvailableProductsRequestBuilder serviceId(String serviceId) {
            this.serviceId = serviceId;
            return this;
        }
        
        /**
         * Set name
         * @param name Query by name of the Product to see a list of products which match that name. e.g. m5a.16xlarge (optional)
         * @return ListAvailableProductsRequestBuilder
         */
        public ListAvailableProductsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return ListAvailableProductsRequestBuilder
         */
        public ListAvailableProductsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000 (optional)
         * @return ListAvailableProductsRequestBuilder
         */
        public ListAvailableProductsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAvailableProducts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableProductsCall(providerId, serviceId, name, page, limit, _callback);
        }


        /**
         * Execute listAvailableProducts request
         * @return Products
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Products execute() throws ApiException {
            ApiResponse<Products> localVarResp = listAvailableProductsWithHttpInfo(providerId, serviceId, name, page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableProducts request with HTTP info returned
         * @return ApiResponse&lt;Products&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Products> executeWithHttpInfo() throws ApiException {
            return listAvailableProductsWithHttpInfo(providerId, serviceId, name, page, limit);
        }

        /**
         * Execute listAvailableProducts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Products> _callback) throws ApiException {
            return listAvailableProductsAsync(providerId, serviceId, name, page, limit, _callback);
        }
    }

    /**
     * 
     * Return available Products for a Service. For example, with a Provider of AWS and a Service of EC2, Products will be a list of all EC2 Instances. By default, this endpoint returns all Products across all Services and Providers but has optional query parameters for filtering listed below.
     * @return ListAvailableProductsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableProductsRequestBuilder listAvailableProducts() throws IllegalArgumentException {
        return new ListAvailableProductsRequestBuilder();
    }
}
