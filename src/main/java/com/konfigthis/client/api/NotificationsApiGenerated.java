/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostReportNotifications;
import com.konfigthis.client.model.PutReportNotifications;
import com.konfigthis.client.model.ReportNotification;
import com.konfigthis.client.model.ReportNotifications;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NotificationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createReportNotificationCall(PostReportNotifications postReportNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postReportNotifications;

        // create path and map variables
        String localVarPath = "/report_notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReportNotificationValidateBeforeCall(PostReportNotifications postReportNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postReportNotifications' is set
        if (postReportNotifications == null) {
            throw new ApiException("Missing the required parameter 'postReportNotifications' when calling createReportNotification(Async)");
        }

        return createReportNotificationCall(postReportNotifications, _callback);

    }


    private ApiResponse<ReportNotification> createReportNotificationWithHttpInfo(PostReportNotifications postReportNotifications) throws ApiException {
        okhttp3.Call localVarCall = createReportNotificationValidateBeforeCall(postReportNotifications, null);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReportNotificationAsync(PostReportNotifications postReportNotifications, final ApiCallback<ReportNotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReportNotificationValidateBeforeCall(postReportNotifications, _callback);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReportNotificationRequestBuilder {
        private final String title;
        private final String costReportToken;
        private final String frequency;
        private final String change;
        private String workspaceToken;
        private List<String> userTokens;
        private List<String> recipientChannels;

        private CreateReportNotificationRequestBuilder(String title, String costReportToken, String frequency, String change) {
            this.title = title;
            this.costReportToken = costReportToken;
            this.frequency = frequency;
            this.change = change;
        }

        /**
         * Set workspaceToken
         * @param workspaceToken The token of the Workspace to add the ReportNotification to. Required if the API token is associated with multiple Workspaces. (optional)
         * @return CreateReportNotificationRequestBuilder
         */
        public CreateReportNotificationRequestBuilder workspaceToken(String workspaceToken) {
            this.workspaceToken = workspaceToken;
            return this;
        }
        
        /**
         * Set userTokens
         * @param userTokens The Users that receive the notification. (optional)
         * @return CreateReportNotificationRequestBuilder
         */
        public CreateReportNotificationRequestBuilder userTokens(List<String> userTokens) {
            this.userTokens = userTokens;
            return this;
        }
        
        /**
         * Set recipientChannels
         * @param recipientChannels The Slack or Microsoft Teams channels that receive the notification. (optional)
         * @return CreateReportNotificationRequestBuilder
         */
        public CreateReportNotificationRequestBuilder recipientChannels(List<String> recipientChannels) {
            this.recipientChannels = recipientChannels;
            return this;
        }
        
        /**
         * Build call for createReportNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostReportNotifications postReportNotifications = buildBodyParams();
            return createReportNotificationCall(postReportNotifications, _callback);
        }

        private PostReportNotifications buildBodyParams() {
            PostReportNotifications postReportNotifications = new PostReportNotifications();
            postReportNotifications.title(this.title);
            postReportNotifications.costReportToken(this.costReportToken);
            postReportNotifications.workspaceToken(this.workspaceToken);
            postReportNotifications.userTokens(this.userTokens);
            postReportNotifications.recipientChannels(this.recipientChannels);
            postReportNotifications.frequency(this.frequency);
            postReportNotifications.change(this.change);
            return postReportNotifications;
        }

        /**
         * Execute createReportNotification request
         * @return ReportNotification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReportNotification execute() throws ApiException {
            PostReportNotifications postReportNotifications = buildBodyParams();
            ApiResponse<ReportNotification> localVarResp = createReportNotificationWithHttpInfo(postReportNotifications);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReportNotification request with HTTP info returned
         * @return ApiResponse&lt;ReportNotification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportNotification> executeWithHttpInfo() throws ApiException {
            PostReportNotifications postReportNotifications = buildBodyParams();
            return createReportNotificationWithHttpInfo(postReportNotifications);
        }

        /**
         * Execute createReportNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportNotification> _callback) throws ApiException {
            PostReportNotifications postReportNotifications = buildBodyParams();
            return createReportNotificationAsync(postReportNotifications, _callback);
        }
    }

    /**
     * 
     * Create a ReportNotification.
     * @param postReportNotifications  (required)
     * @return CreateReportNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateReportNotificationRequestBuilder createReportNotification(String title, String costReportToken, String frequency, String change) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (costReportToken == null) throw new IllegalArgumentException("\"costReportToken\" is required but got null");
            

        if (frequency == null) throw new IllegalArgumentException("\"frequency\" is required but got null");
            

        if (change == null) throw new IllegalArgumentException("\"change\" is required but got null");
            

        return new CreateReportNotificationRequestBuilder(title, costReportToken, frequency, change);
    }
    private okhttp3.Call deleteReportNotificationCall(String reportNotificationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report_notifications/{report_notification_token}"
            .replace("{" + "report_notification_token" + "}", localVarApiClient.escapeString(reportNotificationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReportNotificationValidateBeforeCall(String reportNotificationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportNotificationToken' is set
        if (reportNotificationToken == null) {
            throw new ApiException("Missing the required parameter 'reportNotificationToken' when calling deleteReportNotification(Async)");
        }

        return deleteReportNotificationCall(reportNotificationToken, _callback);

    }


    private ApiResponse<ReportNotification> deleteReportNotificationWithHttpInfo(String reportNotificationToken) throws ApiException {
        okhttp3.Call localVarCall = deleteReportNotificationValidateBeforeCall(reportNotificationToken, null);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteReportNotificationAsync(String reportNotificationToken, final ApiCallback<ReportNotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReportNotificationValidateBeforeCall(reportNotificationToken, _callback);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteReportNotificationRequestBuilder {
        private final String reportNotificationToken;

        private DeleteReportNotificationRequestBuilder(String reportNotificationToken) {
            this.reportNotificationToken = reportNotificationToken;
        }

        /**
         * Build call for deleteReportNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteReportNotificationCall(reportNotificationToken, _callback);
        }


        /**
         * Execute deleteReportNotification request
         * @return ReportNotification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReportNotification execute() throws ApiException {
            ApiResponse<ReportNotification> localVarResp = deleteReportNotificationWithHttpInfo(reportNotificationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteReportNotification request with HTTP info returned
         * @return ApiResponse&lt;ReportNotification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportNotification> executeWithHttpInfo() throws ApiException {
            return deleteReportNotificationWithHttpInfo(reportNotificationToken);
        }

        /**
         * Execute deleteReportNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportNotification> _callback) throws ApiException {
            return deleteReportNotificationAsync(reportNotificationToken, _callback);
        }
    }

    /**
     * 
     * Delete a ReportNotification.
     * @param reportNotificationToken  (required)
     * @return DeleteReportNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteReportNotificationRequestBuilder deleteReportNotification(String reportNotificationToken) throws IllegalArgumentException {
        if (reportNotificationToken == null) throw new IllegalArgumentException("\"reportNotificationToken\" is required but got null");
            

        return new DeleteReportNotificationRequestBuilder(reportNotificationToken);
    }
    private okhttp3.Call getAllReportNotificationsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report_notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllReportNotificationsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getAllReportNotificationsCall(page, limit, _callback);

    }


    private ApiResponse<ReportNotifications> getAllReportNotificationsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllReportNotificationsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<ReportNotifications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllReportNotificationsAsync(Integer page, Integer limit, final ApiCallback<ReportNotifications> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllReportNotificationsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<ReportNotifications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllReportNotificationsRequestBuilder {
        private Integer page;
        private Integer limit;

        private GetAllReportNotificationsRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return GetAllReportNotificationsRequestBuilder
         */
        public GetAllReportNotificationsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return GetAllReportNotificationsRequestBuilder
         */
        public GetAllReportNotificationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllReportNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllReportNotificationsCall(page, limit, _callback);
        }


        /**
         * Execute getAllReportNotifications request
         * @return ReportNotifications
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReportNotifications execute() throws ApiException {
            ApiResponse<ReportNotifications> localVarResp = getAllReportNotificationsWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllReportNotifications request with HTTP info returned
         * @return ApiResponse&lt;ReportNotifications&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportNotifications> executeWithHttpInfo() throws ApiException {
            return getAllReportNotificationsWithHttpInfo(page, limit);
        }

        /**
         * Execute getAllReportNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportNotifications> _callback) throws ApiException {
            return getAllReportNotificationsAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all ReportNotifications.
     * @return GetAllReportNotificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllReportNotificationsRequestBuilder getAllReportNotifications() throws IllegalArgumentException {
        return new GetAllReportNotificationsRequestBuilder();
    }
    private okhttp3.Call getReportNotificationCall(String reportNotificationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report_notifications/{report_notification_token}"
            .replace("{" + "report_notification_token" + "}", localVarApiClient.escapeString(reportNotificationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportNotificationValidateBeforeCall(String reportNotificationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportNotificationToken' is set
        if (reportNotificationToken == null) {
            throw new ApiException("Missing the required parameter 'reportNotificationToken' when calling getReportNotification(Async)");
        }

        return getReportNotificationCall(reportNotificationToken, _callback);

    }


    private ApiResponse<ReportNotification> getReportNotificationWithHttpInfo(String reportNotificationToken) throws ApiException {
        okhttp3.Call localVarCall = getReportNotificationValidateBeforeCall(reportNotificationToken, null);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReportNotificationAsync(String reportNotificationToken, final ApiCallback<ReportNotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportNotificationValidateBeforeCall(reportNotificationToken, _callback);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReportNotificationRequestBuilder {
        private final String reportNotificationToken;

        private GetReportNotificationRequestBuilder(String reportNotificationToken) {
            this.reportNotificationToken = reportNotificationToken;
        }

        /**
         * Build call for getReportNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReportNotificationCall(reportNotificationToken, _callback);
        }


        /**
         * Execute getReportNotification request
         * @return ReportNotification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReportNotification execute() throws ApiException {
            ApiResponse<ReportNotification> localVarResp = getReportNotificationWithHttpInfo(reportNotificationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReportNotification request with HTTP info returned
         * @return ApiResponse&lt;ReportNotification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportNotification> executeWithHttpInfo() throws ApiException {
            return getReportNotificationWithHttpInfo(reportNotificationToken);
        }

        /**
         * Execute getReportNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportNotification> _callback) throws ApiException {
            return getReportNotificationAsync(reportNotificationToken, _callback);
        }
    }

    /**
     * 
     * Return a ReportNotification.
     * @param reportNotificationToken  (required)
     * @return GetReportNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetReportNotificationRequestBuilder getReportNotification(String reportNotificationToken) throws IllegalArgumentException {
        if (reportNotificationToken == null) throw new IllegalArgumentException("\"reportNotificationToken\" is required but got null");
            

        return new GetReportNotificationRequestBuilder(reportNotificationToken);
    }
    private okhttp3.Call updateReportNotificationCall(String reportNotificationToken, PutReportNotifications putReportNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putReportNotifications;

        // create path and map variables
        String localVarPath = "/report_notifications/{report_notification_token}"
            .replace("{" + "report_notification_token" + "}", localVarApiClient.escapeString(reportNotificationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReportNotificationValidateBeforeCall(String reportNotificationToken, PutReportNotifications putReportNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportNotificationToken' is set
        if (reportNotificationToken == null) {
            throw new ApiException("Missing the required parameter 'reportNotificationToken' when calling updateReportNotification(Async)");
        }

        // verify the required parameter 'putReportNotifications' is set
        if (putReportNotifications == null) {
            throw new ApiException("Missing the required parameter 'putReportNotifications' when calling updateReportNotification(Async)");
        }

        return updateReportNotificationCall(reportNotificationToken, putReportNotifications, _callback);

    }


    private ApiResponse<ReportNotification> updateReportNotificationWithHttpInfo(String reportNotificationToken, PutReportNotifications putReportNotifications) throws ApiException {
        okhttp3.Call localVarCall = updateReportNotificationValidateBeforeCall(reportNotificationToken, putReportNotifications, null);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateReportNotificationAsync(String reportNotificationToken, PutReportNotifications putReportNotifications, final ApiCallback<ReportNotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReportNotificationValidateBeforeCall(reportNotificationToken, putReportNotifications, _callback);
        Type localVarReturnType = new TypeToken<ReportNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateReportNotificationRequestBuilder {
        private final String reportNotificationToken;
        private String title;
        private String costReportToken;
        private List<String> userTokens;
        private List<String> recipientChannels;
        private String frequency;
        private String change;

        private UpdateReportNotificationRequestBuilder(String reportNotificationToken) {
            this.reportNotificationToken = reportNotificationToken;
        }

        /**
         * Set title
         * @param title The title of the ReportNotification. (optional)
         * @return UpdateReportNotificationRequestBuilder
         */
        public UpdateReportNotificationRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set costReportToken
         * @param costReportToken The CostReport token. (optional)
         * @return UpdateReportNotificationRequestBuilder
         */
        public UpdateReportNotificationRequestBuilder costReportToken(String costReportToken) {
            this.costReportToken = costReportToken;
            return this;
        }
        
        /**
         * Set userTokens
         * @param userTokens The Users that receive the notification. (optional)
         * @return UpdateReportNotificationRequestBuilder
         */
        public UpdateReportNotificationRequestBuilder userTokens(List<String> userTokens) {
            this.userTokens = userTokens;
            return this;
        }
        
        /**
         * Set recipientChannels
         * @param recipientChannels The Slack or Microsoft Teams channels that receive the notification. (optional)
         * @return UpdateReportNotificationRequestBuilder
         */
        public UpdateReportNotificationRequestBuilder recipientChannels(List<String> recipientChannels) {
            this.recipientChannels = recipientChannels;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency The frequency the ReportNotification is sent. Possible values: daily, weekly, monthly. (optional)
         * @return UpdateReportNotificationRequestBuilder
         */
        public UpdateReportNotificationRequestBuilder frequency(String frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set change
         * @param change The type of change the ReportNotification is tracking. Possible values: percentage, dollars. (optional)
         * @return UpdateReportNotificationRequestBuilder
         */
        public UpdateReportNotificationRequestBuilder change(String change) {
            this.change = change;
            return this;
        }
        
        /**
         * Build call for updateReportNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutReportNotifications putReportNotifications = buildBodyParams();
            return updateReportNotificationCall(reportNotificationToken, putReportNotifications, _callback);
        }

        private PutReportNotifications buildBodyParams() {
            PutReportNotifications putReportNotifications = new PutReportNotifications();
            putReportNotifications.title(this.title);
            putReportNotifications.costReportToken(this.costReportToken);
            putReportNotifications.userTokens(this.userTokens);
            putReportNotifications.recipientChannels(this.recipientChannels);
            putReportNotifications.frequency(this.frequency);
            putReportNotifications.change(this.change);
            return putReportNotifications;
        }

        /**
         * Execute updateReportNotification request
         * @return ReportNotification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReportNotification execute() throws ApiException {
            PutReportNotifications putReportNotifications = buildBodyParams();
            ApiResponse<ReportNotification> localVarResp = updateReportNotificationWithHttpInfo(reportNotificationToken, putReportNotifications);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateReportNotification request with HTTP info returned
         * @return ApiResponse&lt;ReportNotification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportNotification> executeWithHttpInfo() throws ApiException {
            PutReportNotifications putReportNotifications = buildBodyParams();
            return updateReportNotificationWithHttpInfo(reportNotificationToken, putReportNotifications);
        }

        /**
         * Execute updateReportNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportNotification> _callback) throws ApiException {
            PutReportNotifications putReportNotifications = buildBodyParams();
            return updateReportNotificationAsync(reportNotificationToken, putReportNotifications, _callback);
        }
    }

    /**
     * 
     * Update a ReportNotification.
     * @param reportNotificationToken  (required)
     * @param putReportNotifications  (required)
     * @return UpdateReportNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateReportNotificationRequestBuilder updateReportNotification(String reportNotificationToken) throws IllegalArgumentException {
        if (reportNotificationToken == null) throw new IllegalArgumentException("\"reportNotificationToken\" is required but got null");
            

        return new UpdateReportNotificationRequestBuilder(reportNotificationToken);
    }
}
