/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CostReport;
import com.konfigthis.client.model.CostReports;
import com.konfigthis.client.model.Costs;
import com.konfigthis.client.model.Dashboard;
import com.konfigthis.client.model.Dashboards;
import com.konfigthis.client.model.PostCostReports;
import com.konfigthis.client.model.PostCostReportsBusinessMetricTokensWithMetadataInner;
import com.konfigthis.client.model.PostCostReportsSettings;
import com.konfigthis.client.model.PostDashboards;
import com.konfigthis.client.model.PutCostReports;
import com.konfigthis.client.model.PutCostReportsBusinessMetricTokensWithMetadataInner;
import com.konfigthis.client.model.PutCostReportsSettings;
import com.konfigthis.client.model.PutDashboards;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CostsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CostsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CostsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDashboardCall(PostDashboards postDashboards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postDashboards;

        // create path and map variables
        String localVarPath = "/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDashboardValidateBeforeCall(PostDashboards postDashboards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postDashboards' is set
        if (postDashboards == null) {
            throw new ApiException("Missing the required parameter 'postDashboards' when calling createDashboard(Async)");
        }

        return createDashboardCall(postDashboards, _callback);

    }


    private ApiResponse<Dashboard> createDashboardWithHttpInfo(PostDashboards postDashboards) throws ApiException {
        okhttp3.Call localVarCall = createDashboardValidateBeforeCall(postDashboards, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDashboardAsync(PostDashboards postDashboards, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDashboardValidateBeforeCall(postDashboards, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDashboardRequestBuilder {
        private final String title;
        private final String endDate;
        private List<String> widgetTokens;
        private List<String> savedFilterTokens;
        private String dateBin;
        private String dateInterval;
        private String startDate;
        private String workspaceToken;

        private CreateDashboardRequestBuilder(String title, String endDate) {
            this.title = title;
            this.endDate = endDate;
        }

        /**
         * Set widgetTokens
         * @param widgetTokens The tokens of the widgets to add to the Dashboard. Currently only supports CostReport tokens. (optional)
         * @return CreateDashboardRequestBuilder
         */
        public CreateDashboardRequestBuilder widgetTokens(List<String> widgetTokens) {
            this.widgetTokens = widgetTokens;
            return this;
        }
        
        /**
         * Set savedFilterTokens
         * @param savedFilterTokens The tokens of the Saved Filters used in the Dashboard. (optional)
         * @return CreateDashboardRequestBuilder
         */
        public CreateDashboardRequestBuilder savedFilterTokens(List<String> savedFilterTokens) {
            this.savedFilterTokens = savedFilterTokens;
            return this;
        }
        
        /**
         * Set dateBin
         * @param dateBin Determines how to group costs in the Dashboard. (optional)
         * @return CreateDashboardRequestBuilder
         */
        public CreateDashboardRequestBuilder dateBin(String dateBin) {
            this.dateBin = dateBin;
            return this;
        }
        
        /**
         * Set dateInterval
         * @param dateInterval Determines the date range in the Dashboard. Incompatible with &#39;start_date&#39; and &#39;end_date&#39; parameters. (optional)
         * @return CreateDashboardRequestBuilder
         */
        public CreateDashboardRequestBuilder dateInterval(String dateInterval) {
            this.dateInterval = dateInterval;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with &#39;date_interval&#39; parameter. (optional)
         * @return CreateDashboardRequestBuilder
         */
        public CreateDashboardRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set workspaceToken
         * @param workspaceToken The token of the Workspace to add the Dashboard to. Required if the API token is associated with multiple Workspaces. (optional)
         * @return CreateDashboardRequestBuilder
         */
        public CreateDashboardRequestBuilder workspaceToken(String workspaceToken) {
            this.workspaceToken = workspaceToken;
            return this;
        }
        
        /**
         * Build call for createDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostDashboards postDashboards = buildBodyParams();
            return createDashboardCall(postDashboards, _callback);
        }

        private PostDashboards buildBodyParams() {
            PostDashboards postDashboards = new PostDashboards();
            postDashboards.title(this.title);
            postDashboards.widgetTokens(this.widgetTokens);
            postDashboards.savedFilterTokens(this.savedFilterTokens);
            if (this.dateBin != null)
            postDashboards.dateBin(PostDashboards.DateBinEnum.fromValue(this.dateBin));
            if (this.dateInterval != null)
            postDashboards.dateInterval(PostDashboards.DateIntervalEnum.fromValue(this.dateInterval));
            postDashboards.startDate(this.startDate);
            postDashboards.endDate(this.endDate);
            postDashboards.workspaceToken(this.workspaceToken);
            return postDashboards;
        }

        /**
         * Execute createDashboard request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            PostDashboards postDashboards = buildBodyParams();
            ApiResponse<Dashboard> localVarResp = createDashboardWithHttpInfo(postDashboards);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDashboard request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            PostDashboards postDashboards = buildBodyParams();
            return createDashboardWithHttpInfo(postDashboards);
        }

        /**
         * Execute createDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            PostDashboards postDashboards = buildBodyParams();
            return createDashboardAsync(postDashboards, _callback);
        }
    }

    /**
     * 
     * Create a Dashboard.
     * @param postDashboards  (required)
     * @return CreateDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateDashboardRequestBuilder createDashboard(String title, String endDate) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new CreateDashboardRequestBuilder(title, endDate);
    }
    private okhttp3.Call createReportCall(PostCostReports postCostReports, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCostReports;

        // create path and map variables
        String localVarPath = "/cost_reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReportValidateBeforeCall(PostCostReports postCostReports, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postCostReports' is set
        if (postCostReports == null) {
            throw new ApiException("Missing the required parameter 'postCostReports' when calling createReport(Async)");
        }

        return createReportCall(postCostReports, _callback);

    }


    private ApiResponse<CostReport> createReportWithHttpInfo(PostCostReports postCostReports) throws ApiException {
        okhttp3.Call localVarCall = createReportValidateBeforeCall(postCostReports, null);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReportAsync(PostCostReports postCostReports, final ApiCallback<CostReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReportValidateBeforeCall(postCostReports, _callback);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReportRequestBuilder {
        private final String title;
        private String workspaceToken;
        private String groupings;
        private String filter;
        private List<String> savedFilterTokens;
        private List<PostCostReportsBusinessMetricTokensWithMetadataInner> businessMetricTokensWithMetadata;
        private String folderToken;
        private PostCostReportsSettings settings;

        private CreateReportRequestBuilder(String title) {
            this.title = title;
        }

        /**
         * Set workspaceToken
         * @param workspaceToken The token of the Workspace to add the Cost Report to. Ignored if &#39;folder_token&#39; is set. Required if the API token is associated with multiple Workspaces. (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder workspaceToken(String workspaceToken) {
            this.workspaceToken = workspaceToken;
            return this;
        }
        
        /**
         * Set groupings
         * @param groupings Grouping values for aggregating costs on the report. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:&lt;tag_value&gt;. If providing multiple groupings, join as comma separated values: groupings&#x3D;provider,service,region (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder groupings(String groupings) {
            this.groupings = groupings;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The filter query language to apply to the CostReport. Additional documentation available at https://docs.vantage.sh/vql. (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set savedFilterTokens
         * @param savedFilterTokens The tokens of the SavedFilters to apply to the CostReport. (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder savedFilterTokens(List<String> savedFilterTokens) {
            this.savedFilterTokens = savedFilterTokens;
            return this;
        }
        
        /**
         * Set businessMetricTokensWithMetadata
         * @param businessMetricTokensWithMetadata The tokens for any BusinessMetrics to attach to the CostReport, and the unit scale. (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder businessMetricTokensWithMetadata(List<PostCostReportsBusinessMetricTokensWithMetadataInner> businessMetricTokensWithMetadata) {
            this.businessMetricTokensWithMetadata = businessMetricTokensWithMetadata;
            return this;
        }
        
        /**
         * Set folderToken
         * @param folderToken The token of the Folder to add the CostReport to. Determines the Workspace the report is assigned to. (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder folderToken(String folderToken) {
            this.folderToken = folderToken;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder settings(PostCostReportsSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Build call for createReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostCostReports postCostReports = buildBodyParams();
            return createReportCall(postCostReports, _callback);
        }

        private PostCostReports buildBodyParams() {
            PostCostReports postCostReports = new PostCostReports();
            postCostReports.title(this.title);
            postCostReports.workspaceToken(this.workspaceToken);
            postCostReports.groupings(this.groupings);
            postCostReports.filter(this.filter);
            postCostReports.savedFilterTokens(this.savedFilterTokens);
            postCostReports.businessMetricTokensWithMetadata(this.businessMetricTokensWithMetadata);
            postCostReports.folderToken(this.folderToken);
            postCostReports.settings(this.settings);
            return postCostReports;
        }

        /**
         * Execute createReport request
         * @return CostReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostReport execute() throws ApiException {
            PostCostReports postCostReports = buildBodyParams();
            ApiResponse<CostReport> localVarResp = createReportWithHttpInfo(postCostReports);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReport request with HTTP info returned
         * @return ApiResponse&lt;CostReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostReport> executeWithHttpInfo() throws ApiException {
            PostCostReports postCostReports = buildBodyParams();
            return createReportWithHttpInfo(postCostReports);
        }

        /**
         * Execute createReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostReport> _callback) throws ApiException {
            PostCostReports postCostReports = buildBodyParams();
            return createReportAsync(postCostReports, _callback);
        }
    }

    /**
     * 
     * Create a CostReport.
     * @param postCostReports  (required)
     * @return CreateReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateReportRequestBuilder createReport(String title) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        return new CreateReportRequestBuilder(title);
    }
    private okhttp3.Call deleteCostReportCall(String costReportToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cost_reports/{cost_report_token}"
            .replace("{" + "cost_report_token" + "}", localVarApiClient.escapeString(costReportToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCostReportValidateBeforeCall(String costReportToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'costReportToken' is set
        if (costReportToken == null) {
            throw new ApiException("Missing the required parameter 'costReportToken' when calling deleteCostReport(Async)");
        }

        return deleteCostReportCall(costReportToken, _callback);

    }


    private ApiResponse<CostReport> deleteCostReportWithHttpInfo(String costReportToken) throws ApiException {
        okhttp3.Call localVarCall = deleteCostReportValidateBeforeCall(costReportToken, null);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCostReportAsync(String costReportToken, final ApiCallback<CostReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCostReportValidateBeforeCall(costReportToken, _callback);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCostReportRequestBuilder {
        private final String costReportToken;

        private DeleteCostReportRequestBuilder(String costReportToken) {
            this.costReportToken = costReportToken;
        }

        /**
         * Build call for deleteCostReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCostReportCall(costReportToken, _callback);
        }


        /**
         * Execute deleteCostReport request
         * @return CostReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostReport execute() throws ApiException {
            ApiResponse<CostReport> localVarResp = deleteCostReportWithHttpInfo(costReportToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCostReport request with HTTP info returned
         * @return ApiResponse&lt;CostReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostReport> executeWithHttpInfo() throws ApiException {
            return deleteCostReportWithHttpInfo(costReportToken);
        }

        /**
         * Execute deleteCostReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostReport> _callback) throws ApiException {
            return deleteCostReportAsync(costReportToken, _callback);
        }
    }

    /**
     * 
     * Delete a CostReport.
     * @param costReportToken  (required)
     * @return DeleteCostReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCostReportRequestBuilder deleteCostReport(String costReportToken) throws IllegalArgumentException {
        if (costReportToken == null) throw new IllegalArgumentException("\"costReportToken\" is required but got null");
            

        return new DeleteCostReportRequestBuilder(costReportToken);
    }
    private okhttp3.Call deleteDashboardCall(String dashboardToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_token}"
            .replace("{" + "dashboard_token" + "}", localVarApiClient.escapeString(dashboardToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardValidateBeforeCall(String dashboardToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardToken' is set
        if (dashboardToken == null) {
            throw new ApiException("Missing the required parameter 'dashboardToken' when calling deleteDashboard(Async)");
        }

        return deleteDashboardCall(dashboardToken, _callback);

    }


    private ApiResponse<Dashboard> deleteDashboardWithHttpInfo(String dashboardToken) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardValidateBeforeCall(dashboardToken, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDashboardAsync(String dashboardToken, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardValidateBeforeCall(dashboardToken, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteDashboardRequestBuilder {
        private final String dashboardToken;

        private DeleteDashboardRequestBuilder(String dashboardToken) {
            this.dashboardToken = dashboardToken;
        }

        /**
         * Build call for deleteDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDashboardCall(dashboardToken, _callback);
        }


        /**
         * Execute deleteDashboard request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            ApiResponse<Dashboard> localVarResp = deleteDashboardWithHttpInfo(dashboardToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteDashboard request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            return deleteDashboardWithHttpInfo(dashboardToken);
        }

        /**
         * Execute deleteDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            return deleteDashboardAsync(dashboardToken, _callback);
        }
    }

    /**
     * 
     * Delete a Dashboard.
     * @param dashboardToken  (required)
     * @return DeleteDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDashboardRequestBuilder deleteDashboard(String dashboardToken) throws IllegalArgumentException {
        if (dashboardToken == null) throw new IllegalArgumentException("\"dashboardToken\" is required but got null");
            

        return new DeleteDashboardRequestBuilder(dashboardToken);
    }
    private okhttp3.Call getAllCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getAllCall(page, limit, _callback);

    }


    private ApiResponse<Dashboards> getAllWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<Dashboards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Integer page, Integer limit, final ApiCallback<Dashboards> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<Dashboards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private Integer page;
        private Integer limit;

        private GetAllRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(page, limit, _callback);
        }


        /**
         * Execute getAll request
         * @return Dashboards
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Dashboards execute() throws ApiException {
            ApiResponse<Dashboards> localVarResp = getAllWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;Dashboards&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboards> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(page, limit);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboards> _callback) throws ApiException {
            return getAllAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all Dashboards.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getAllCostReportsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cost_reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCostReportsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getAllCostReportsCall(page, limit, _callback);

    }


    private ApiResponse<CostReports> getAllCostReportsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllCostReportsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<CostReports>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllCostReportsAsync(Integer page, Integer limit, final ApiCallback<CostReports> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCostReportsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<CostReports>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllCostReportsRequestBuilder {
        private Integer page;
        private Integer limit;

        private GetAllCostReportsRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return GetAllCostReportsRequestBuilder
         */
        public GetAllCostReportsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return GetAllCostReportsRequestBuilder
         */
        public GetAllCostReportsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllCostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCostReportsCall(page, limit, _callback);
        }


        /**
         * Execute getAllCostReports request
         * @return CostReports
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostReports execute() throws ApiException {
            ApiResponse<CostReports> localVarResp = getAllCostReportsWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllCostReports request with HTTP info returned
         * @return ApiResponse&lt;CostReports&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostReports> executeWithHttpInfo() throws ApiException {
            return getAllCostReportsWithHttpInfo(page, limit);
        }

        /**
         * Execute getAllCostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostReports> _callback) throws ApiException {
            return getAllCostReportsAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all CostReports.
     * @return GetAllCostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllCostReportsRequestBuilder getAllCostReports() throws IllegalArgumentException {
        return new GetAllCostReportsRequestBuilder();
    }
    private okhttp3.Call getCostReportCall(String costReportToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cost_reports/{cost_report_token}"
            .replace("{" + "cost_report_token" + "}", localVarApiClient.escapeString(costReportToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCostReportValidateBeforeCall(String costReportToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'costReportToken' is set
        if (costReportToken == null) {
            throw new ApiException("Missing the required parameter 'costReportToken' when calling getCostReport(Async)");
        }

        return getCostReportCall(costReportToken, _callback);

    }


    private ApiResponse<CostReport> getCostReportWithHttpInfo(String costReportToken) throws ApiException {
        okhttp3.Call localVarCall = getCostReportValidateBeforeCall(costReportToken, null);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCostReportAsync(String costReportToken, final ApiCallback<CostReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCostReportValidateBeforeCall(costReportToken, _callback);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCostReportRequestBuilder {
        private final String costReportToken;

        private GetCostReportRequestBuilder(String costReportToken) {
            this.costReportToken = costReportToken;
        }

        /**
         * Build call for getCostReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCostReportCall(costReportToken, _callback);
        }


        /**
         * Execute getCostReport request
         * @return CostReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostReport execute() throws ApiException {
            ApiResponse<CostReport> localVarResp = getCostReportWithHttpInfo(costReportToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCostReport request with HTTP info returned
         * @return ApiResponse&lt;CostReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostReport> executeWithHttpInfo() throws ApiException {
            return getCostReportWithHttpInfo(costReportToken);
        }

        /**
         * Execute getCostReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostReport> _callback) throws ApiException {
            return getCostReportAsync(costReportToken, _callback);
        }
    }

    /**
     * 
     * Return a CostReport.
     * @param costReportToken  (required)
     * @return GetCostReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCostReportRequestBuilder getCostReport(String costReportToken) throws IllegalArgumentException {
        if (costReportToken == null) throw new IllegalArgumentException("\"costReportToken\" is required but got null");
            

        return new GetCostReportRequestBuilder(costReportToken);
    }
    private okhttp3.Call getSpecificDashboardCall(String dashboardToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_token}"
            .replace("{" + "dashboard_token" + "}", localVarApiClient.escapeString(dashboardToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificDashboardValidateBeforeCall(String dashboardToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardToken' is set
        if (dashboardToken == null) {
            throw new ApiException("Missing the required parameter 'dashboardToken' when calling getSpecificDashboard(Async)");
        }

        return getSpecificDashboardCall(dashboardToken, _callback);

    }


    private ApiResponse<Dashboard> getSpecificDashboardWithHttpInfo(String dashboardToken) throws ApiException {
        okhttp3.Call localVarCall = getSpecificDashboardValidateBeforeCall(dashboardToken, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificDashboardAsync(String dashboardToken, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificDashboardValidateBeforeCall(dashboardToken, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificDashboardRequestBuilder {
        private final String dashboardToken;

        private GetSpecificDashboardRequestBuilder(String dashboardToken) {
            this.dashboardToken = dashboardToken;
        }

        /**
         * Build call for getSpecificDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificDashboardCall(dashboardToken, _callback);
        }


        /**
         * Execute getSpecificDashboard request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            ApiResponse<Dashboard> localVarResp = getSpecificDashboardWithHttpInfo(dashboardToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificDashboard request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            return getSpecificDashboardWithHttpInfo(dashboardToken);
        }

        /**
         * Execute getSpecificDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            return getSpecificDashboardAsync(dashboardToken, _callback);
        }
    }

    /**
     * 
     * Return a specific Dashboard.
     * @param dashboardToken  (required)
     * @return GetSpecificDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificDashboardRequestBuilder getSpecificDashboard(String dashboardToken) throws IllegalArgumentException {
        if (dashboardToken == null) throw new IllegalArgumentException("\"dashboardToken\" is required but got null");
            

        return new GetSpecificDashboardRequestBuilder(dashboardToken);
    }
    private okhttp3.Call listCostReportCall(String costReportToken, String startDate, String endDate, List<String> groupings, String order, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/costs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (costReportToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cost_report_token", costReportToken));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (groupings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groupings", groupings));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCostReportValidateBeforeCall(String costReportToken, String startDate, String endDate, List<String> groupings, String order, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'costReportToken' is set
        if (costReportToken == null) {
            throw new ApiException("Missing the required parameter 'costReportToken' when calling listCostReport(Async)");
        }

        return listCostReportCall(costReportToken, startDate, endDate, groupings, order, limit, _callback);

    }


    private ApiResponse<Costs> listCostReportWithHttpInfo(String costReportToken, String startDate, String endDate, List<String> groupings, String order, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listCostReportValidateBeforeCall(costReportToken, startDate, endDate, groupings, order, limit, null);
        Type localVarReturnType = new TypeToken<Costs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCostReportAsync(String costReportToken, String startDate, String endDate, List<String> groupings, String order, Integer limit, final ApiCallback<Costs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCostReportValidateBeforeCall(costReportToken, startDate, endDate, groupings, order, limit, _callback);
        Type localVarReturnType = new TypeToken<Costs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCostReportRequestBuilder {
        private final String costReportToken;
        private String startDate;
        private String endDate;
        private List<String> groupings;
        private String order;
        private Integer limit;

        private ListCostReportRequestBuilder(String costReportToken) {
            this.costReportToken = costReportToken;
        }

        /**
         * Set startDate
         * @param startDate First date you would like to filter costs from. ISO 8601 formatted. (optional)
         * @return ListCostReportRequestBuilder
         */
        public ListCostReportRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Last date you would like to filter costs to. ISO 8601 formatted. (optional)
         * @return ListCostReportRequestBuilder
         */
        public ListCostReportRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set groupings
         * @param groupings Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:&lt;tag_value&gt;. If providing multiple groupings, join as comma separated values: groupings&#x3D;provider,service,region (optional)
         * @return ListCostReportRequestBuilder
         */
        public ListCostReportRequestBuilder groupings(List<String> groupings) {
            this.groupings = groupings;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether to order costs by date in an ascending or descending manner. (optional, default to desc)
         * @return ListCostReportRequestBuilder
         */
        public ListCostReportRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return ListCostReportRequestBuilder
         */
        public ListCostReportRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listCostReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCostReportCall(costReportToken, startDate, endDate, groupings, order, limit, _callback);
        }


        /**
         * Execute listCostReport request
         * @return Costs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Costs execute() throws ApiException {
            ApiResponse<Costs> localVarResp = listCostReportWithHttpInfo(costReportToken, startDate, endDate, groupings, order, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCostReport request with HTTP info returned
         * @return ApiResponse&lt;Costs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Costs> executeWithHttpInfo() throws ApiException {
            return listCostReportWithHttpInfo(costReportToken, startDate, endDate, groupings, order, limit);
        }

        /**
         * Execute listCostReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Costs> _callback) throws ApiException {
            return listCostReportAsync(costReportToken, startDate, endDate, groupings, order, limit, _callback);
        }
    }

    /**
     * 
     * Return all Costs for a CostReport.
     * @param costReportToken The CostReport token. (required)
     * @return ListCostReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListCostReportRequestBuilder listCostReport(String costReportToken) throws IllegalArgumentException {
        if (costReportToken == null) throw new IllegalArgumentException("\"costReportToken\" is required but got null");
            

        return new ListCostReportRequestBuilder(costReportToken);
    }
    private okhttp3.Call updateDashboardCall(String dashboardToken, PutDashboards putDashboards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putDashboards;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_token}"
            .replace("{" + "dashboard_token" + "}", localVarApiClient.escapeString(dashboardToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDashboardValidateBeforeCall(String dashboardToken, PutDashboards putDashboards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardToken' is set
        if (dashboardToken == null) {
            throw new ApiException("Missing the required parameter 'dashboardToken' when calling updateDashboard(Async)");
        }

        // verify the required parameter 'putDashboards' is set
        if (putDashboards == null) {
            throw new ApiException("Missing the required parameter 'putDashboards' when calling updateDashboard(Async)");
        }

        return updateDashboardCall(dashboardToken, putDashboards, _callback);

    }


    private ApiResponse<Dashboard> updateDashboardWithHttpInfo(String dashboardToken, PutDashboards putDashboards) throws ApiException {
        okhttp3.Call localVarCall = updateDashboardValidateBeforeCall(dashboardToken, putDashboards, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDashboardAsync(String dashboardToken, PutDashboards putDashboards, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDashboardValidateBeforeCall(dashboardToken, putDashboards, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDashboardRequestBuilder {
        private final String endDate;
        private final String dashboardToken;
        private String title;
        private List<String> widgetTokens;
        private List<String> savedFilterTokens;
        private String dateBin;
        private String dateInterval;
        private String startDate;

        private UpdateDashboardRequestBuilder(String endDate, String dashboardToken) {
            this.endDate = endDate;
            this.dashboardToken = dashboardToken;
        }

        /**
         * Set title
         * @param title The title of the Dashboard. (optional)
         * @return UpdateDashboardRequestBuilder
         */
        public UpdateDashboardRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set widgetTokens
         * @param widgetTokens The tokens of the widgets to add to the Dashboard. Currently only supports CostReport tokens. (optional)
         * @return UpdateDashboardRequestBuilder
         */
        public UpdateDashboardRequestBuilder widgetTokens(List<String> widgetTokens) {
            this.widgetTokens = widgetTokens;
            return this;
        }
        
        /**
         * Set savedFilterTokens
         * @param savedFilterTokens The tokens of the Saved Filters used in the Dashboard. (optional)
         * @return UpdateDashboardRequestBuilder
         */
        public UpdateDashboardRequestBuilder savedFilterTokens(List<String> savedFilterTokens) {
            this.savedFilterTokens = savedFilterTokens;
            return this;
        }
        
        /**
         * Set dateBin
         * @param dateBin Determines how to group costs in the Dashboard. (optional)
         * @return UpdateDashboardRequestBuilder
         */
        public UpdateDashboardRequestBuilder dateBin(String dateBin) {
            this.dateBin = dateBin;
            return this;
        }
        
        /**
         * Set dateInterval
         * @param dateInterval Determines the date range in the Dashboard. Incompatible with &#39;start_date&#39; and &#39;end_date&#39; parameters. (optional)
         * @return UpdateDashboardRequestBuilder
         */
        public UpdateDashboardRequestBuilder dateInterval(String dateInterval) {
            this.dateInterval = dateInterval;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with &#39;date_interval&#39; parameter. (optional)
         * @return UpdateDashboardRequestBuilder
         */
        public UpdateDashboardRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Build call for updateDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutDashboards putDashboards = buildBodyParams();
            return updateDashboardCall(dashboardToken, putDashboards, _callback);
        }

        private PutDashboards buildBodyParams() {
            PutDashboards putDashboards = new PutDashboards();
            putDashboards.title(this.title);
            putDashboards.widgetTokens(this.widgetTokens);
            putDashboards.savedFilterTokens(this.savedFilterTokens);
            if (this.dateBin != null)
            putDashboards.dateBin(PutDashboards.DateBinEnum.fromValue(this.dateBin));
            if (this.dateInterval != null)
            putDashboards.dateInterval(PutDashboards.DateIntervalEnum.fromValue(this.dateInterval));
            putDashboards.startDate(this.startDate);
            putDashboards.endDate(this.endDate);
            return putDashboards;
        }

        /**
         * Execute updateDashboard request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            PutDashboards putDashboards = buildBodyParams();
            ApiResponse<Dashboard> localVarResp = updateDashboardWithHttpInfo(dashboardToken, putDashboards);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDashboard request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            PutDashboards putDashboards = buildBodyParams();
            return updateDashboardWithHttpInfo(dashboardToken, putDashboards);
        }

        /**
         * Execute updateDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            PutDashboards putDashboards = buildBodyParams();
            return updateDashboardAsync(dashboardToken, putDashboards, _callback);
        }
    }

    /**
     * 
     * Update a Dashboard.
     * @param dashboardToken  (required)
     * @param putDashboards  (required)
     * @return UpdateDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDashboardRequestBuilder updateDashboard(String endDate, String dashboardToken) throws IllegalArgumentException {
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        if (dashboardToken == null) throw new IllegalArgumentException("\"dashboardToken\" is required but got null");
            

        return new UpdateDashboardRequestBuilder(endDate, dashboardToken);
    }
    private okhttp3.Call updateReportCall(String costReportToken, PutCostReports putCostReports, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putCostReports;

        // create path and map variables
        String localVarPath = "/cost_reports/{cost_report_token}"
            .replace("{" + "cost_report_token" + "}", localVarApiClient.escapeString(costReportToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReportValidateBeforeCall(String costReportToken, PutCostReports putCostReports, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'costReportToken' is set
        if (costReportToken == null) {
            throw new ApiException("Missing the required parameter 'costReportToken' when calling updateReport(Async)");
        }

        // verify the required parameter 'putCostReports' is set
        if (putCostReports == null) {
            throw new ApiException("Missing the required parameter 'putCostReports' when calling updateReport(Async)");
        }

        return updateReportCall(costReportToken, putCostReports, _callback);

    }


    private ApiResponse<CostReport> updateReportWithHttpInfo(String costReportToken, PutCostReports putCostReports) throws ApiException {
        okhttp3.Call localVarCall = updateReportValidateBeforeCall(costReportToken, putCostReports, null);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateReportAsync(String costReportToken, PutCostReports putCostReports, final ApiCallback<CostReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReportValidateBeforeCall(costReportToken, putCostReports, _callback);
        Type localVarReturnType = new TypeToken<CostReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateReportRequestBuilder {
        private final String costReportToken;
        private String title;
        private String groupings;
        private String filter;
        private List<String> savedFilterTokens;
        private List<PutCostReportsBusinessMetricTokensWithMetadataInner> businessMetricTokensWithMetadata;
        private String folderToken;
        private PutCostReportsSettings settings;

        private UpdateReportRequestBuilder(String costReportToken) {
            this.costReportToken = costReportToken;
        }

        /**
         * Set title
         * @param title The title of the CostReport. (optional)
         * @return UpdateReportRequestBuilder
         */
        public UpdateReportRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set groupings
         * @param groupings Grouping values for aggregating costs on the report. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:&lt;tag_value&gt;. If providing multiple groupings, join as comma separated values: groupings&#x3D;provider,service,region (optional)
         * @return UpdateReportRequestBuilder
         */
        public UpdateReportRequestBuilder groupings(String groupings) {
            this.groupings = groupings;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The filter query language to apply to the CostReport. Additional documentation available at https://docs.vantage.sh/vql. (optional)
         * @return UpdateReportRequestBuilder
         */
        public UpdateReportRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set savedFilterTokens
         * @param savedFilterTokens The tokens of the SavedFilters to apply to the CostReport. (optional)
         * @return UpdateReportRequestBuilder
         */
        public UpdateReportRequestBuilder savedFilterTokens(List<String> savedFilterTokens) {
            this.savedFilterTokens = savedFilterTokens;
            return this;
        }
        
        /**
         * Set businessMetricTokensWithMetadata
         * @param businessMetricTokensWithMetadata The tokens for any BusinessMetrics to attach to the CostReport, and the unit scale. (optional)
         * @return UpdateReportRequestBuilder
         */
        public UpdateReportRequestBuilder businessMetricTokensWithMetadata(List<PutCostReportsBusinessMetricTokensWithMetadataInner> businessMetricTokensWithMetadata) {
            this.businessMetricTokensWithMetadata = businessMetricTokensWithMetadata;
            return this;
        }
        
        /**
         * Set folderToken
         * @param folderToken The token of the Folder to add the CostReport to. Determines the Workspace the report is assigned to. (optional)
         * @return UpdateReportRequestBuilder
         */
        public UpdateReportRequestBuilder folderToken(String folderToken) {
            this.folderToken = folderToken;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateReportRequestBuilder
         */
        public UpdateReportRequestBuilder settings(PutCostReportsSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Build call for updateReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutCostReports putCostReports = buildBodyParams();
            return updateReportCall(costReportToken, putCostReports, _callback);
        }

        private PutCostReports buildBodyParams() {
            PutCostReports putCostReports = new PutCostReports();
            putCostReports.title(this.title);
            putCostReports.groupings(this.groupings);
            putCostReports.filter(this.filter);
            putCostReports.savedFilterTokens(this.savedFilterTokens);
            putCostReports.businessMetricTokensWithMetadata(this.businessMetricTokensWithMetadata);
            putCostReports.folderToken(this.folderToken);
            putCostReports.settings(this.settings);
            return putCostReports;
        }

        /**
         * Execute updateReport request
         * @return CostReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CostReport execute() throws ApiException {
            PutCostReports putCostReports = buildBodyParams();
            ApiResponse<CostReport> localVarResp = updateReportWithHttpInfo(costReportToken, putCostReports);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateReport request with HTTP info returned
         * @return ApiResponse&lt;CostReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostReport> executeWithHttpInfo() throws ApiException {
            PutCostReports putCostReports = buildBodyParams();
            return updateReportWithHttpInfo(costReportToken, putCostReports);
        }

        /**
         * Execute updateReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostReport> _callback) throws ApiException {
            PutCostReports putCostReports = buildBodyParams();
            return updateReportAsync(costReportToken, putCostReports, _callback);
        }
    }

    /**
     * 
     * Update a CostReport.
     * @param costReportToken  (required)
     * @param putCostReports  (required)
     * @return UpdateReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateReportRequestBuilder updateReport(String costReportToken) throws IllegalArgumentException {
        if (costReportToken == null) throw new IllegalArgumentException("\"costReportToken\" is required but got null");
            

        return new UpdateReportRequestBuilder(costReportToken);
    }
}
