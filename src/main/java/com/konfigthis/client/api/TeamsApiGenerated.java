/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostTeams;
import com.konfigthis.client.model.PutTeams;
import com.konfigthis.client.model.Team;
import com.konfigthis.client.model.Teams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTeamCall(PostTeams postTeams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postTeams;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTeamValidateBeforeCall(PostTeams postTeams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postTeams' is set
        if (postTeams == null) {
            throw new ApiException("Missing the required parameter 'postTeams' when calling createNewTeam(Async)");
        }

        return createNewTeamCall(postTeams, _callback);

    }


    private ApiResponse<Team> createNewTeamWithHttpInfo(PostTeams postTeams) throws ApiException {
        okhttp3.Call localVarCall = createNewTeamValidateBeforeCall(postTeams, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTeamAsync(PostTeams postTeams, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTeamValidateBeforeCall(postTeams, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTeamRequestBuilder {
        private final String name;
        private String description;
        private List<String> workspaceTokens;
        private List<String> userTokens;
        private List<String> userEmails;
        private String role;

        private CreateNewTeamRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the Team. (optional)
         * @return CreateNewTeamRequestBuilder
         */
        public CreateNewTeamRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set workspaceTokens
         * @param workspaceTokens The Workspace tokens to associate to the Team. (optional)
         * @return CreateNewTeamRequestBuilder
         */
        public CreateNewTeamRequestBuilder workspaceTokens(List<String> workspaceTokens) {
            this.workspaceTokens = workspaceTokens;
            return this;
        }
        
        /**
         * Set userTokens
         * @param userTokens The User tokens to associate to the Team. (optional)
         * @return CreateNewTeamRequestBuilder
         */
        public CreateNewTeamRequestBuilder userTokens(List<String> userTokens) {
            this.userTokens = userTokens;
            return this;
        }
        
        /**
         * Set userEmails
         * @param userEmails The User emails to associate to the Team. (optional)
         * @return CreateNewTeamRequestBuilder
         */
        public CreateNewTeamRequestBuilder userEmails(List<String> userEmails) {
            this.userEmails = userEmails;
            return this;
        }
        
        /**
         * Set role
         * @param role The role to assign to the provided Users. Defaults to &#39;editor&#39; which has editor permissions. (optional)
         * @return CreateNewTeamRequestBuilder
         */
        public CreateNewTeamRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Build call for createNewTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostTeams postTeams = buildBodyParams();
            return createNewTeamCall(postTeams, _callback);
        }

        private PostTeams buildBodyParams() {
            PostTeams postTeams = new PostTeams();
            postTeams.description(this.description);
            postTeams.name(this.name);
            postTeams.workspaceTokens(this.workspaceTokens);
            postTeams.userTokens(this.userTokens);
            postTeams.userEmails(this.userEmails);
            if (this.role != null)
            postTeams.role(PostTeams.RoleEnum.fromValue(this.role));
            return postTeams;
        }

        /**
         * Execute createNewTeam request
         * @return Team
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Team execute() throws ApiException {
            PostTeams postTeams = buildBodyParams();
            ApiResponse<Team> localVarResp = createNewTeamWithHttpInfo(postTeams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTeam request with HTTP info returned
         * @return ApiResponse&lt;Team&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Team> executeWithHttpInfo() throws ApiException {
            PostTeams postTeams = buildBodyParams();
            return createNewTeamWithHttpInfo(postTeams);
        }

        /**
         * Execute createNewTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Team> _callback) throws ApiException {
            PostTeams postTeams = buildBodyParams();
            return createNewTeamAsync(postTeams, _callback);
        }
    }

    /**
     * 
     * Create a new Team.
     * @param postTeams  (required)
     * @return CreateNewTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTeamRequestBuilder createNewTeam(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewTeamRequestBuilder(name);
    }
    private okhttp3.Call getSpecificTeamCall(String teamToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_token}"
            .replace("{" + "team_token" + "}", localVarApiClient.escapeString(teamToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificTeamValidateBeforeCall(String teamToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamToken' is set
        if (teamToken == null) {
            throw new ApiException("Missing the required parameter 'teamToken' when calling getSpecificTeam(Async)");
        }

        return getSpecificTeamCall(teamToken, _callback);

    }


    private ApiResponse<Team> getSpecificTeamWithHttpInfo(String teamToken) throws ApiException {
        okhttp3.Call localVarCall = getSpecificTeamValidateBeforeCall(teamToken, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificTeamAsync(String teamToken, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificTeamValidateBeforeCall(teamToken, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificTeamRequestBuilder {
        private final String teamToken;

        private GetSpecificTeamRequestBuilder(String teamToken) {
            this.teamToken = teamToken;
        }

        /**
         * Build call for getSpecificTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificTeamCall(teamToken, _callback);
        }


        /**
         * Execute getSpecificTeam request
         * @return Team
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Team execute() throws ApiException {
            ApiResponse<Team> localVarResp = getSpecificTeamWithHttpInfo(teamToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificTeam request with HTTP info returned
         * @return ApiResponse&lt;Team&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Team> executeWithHttpInfo() throws ApiException {
            return getSpecificTeamWithHttpInfo(teamToken);
        }

        /**
         * Execute getSpecificTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Team> _callback) throws ApiException {
            return getSpecificTeamAsync(teamToken, _callback);
        }
    }

    /**
     * 
     * Return a specific Team.
     * @param teamToken  (required)
     * @return GetSpecificTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificTeamRequestBuilder getSpecificTeam(String teamToken) throws IllegalArgumentException {
        if (teamToken == null) throw new IllegalArgumentException("\"teamToken\" is required but got null");
            

        return new GetSpecificTeamRequestBuilder(teamToken);
    }
    private okhttp3.Call listAccessibleCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccessibleValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return listAccessibleCall(page, limit, _callback);

    }


    private ApiResponse<Teams> listAccessibleWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAccessibleValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<Teams>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAccessibleAsync(Integer page, Integer limit, final ApiCallback<Teams> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccessibleValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<Teams>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAccessibleRequestBuilder {
        private Integer page;
        private Integer limit;

        private ListAccessibleRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return ListAccessibleRequestBuilder
         */
        public ListAccessibleRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return ListAccessibleRequestBuilder
         */
        public ListAccessibleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAccessible
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAccessibleCall(page, limit, _callback);
        }


        /**
         * Execute listAccessible request
         * @return Teams
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Teams execute() throws ApiException {
            ApiResponse<Teams> localVarResp = listAccessibleWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAccessible request with HTTP info returned
         * @return ApiResponse&lt;Teams&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Teams> executeWithHttpInfo() throws ApiException {
            return listAccessibleWithHttpInfo(page, limit);
        }

        /**
         * Execute listAccessible request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Teams> _callback) throws ApiException {
            return listAccessibleAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all Teams that the current API token has access to.
     * @return ListAccessibleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAccessibleRequestBuilder listAccessible() throws IllegalArgumentException {
        return new ListAccessibleRequestBuilder();
    }
    private okhttp3.Call removeTeamCall(String teamToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_token}"
            .replace("{" + "team_token" + "}", localVarApiClient.escapeString(teamToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTeamValidateBeforeCall(String teamToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamToken' is set
        if (teamToken == null) {
            throw new ApiException("Missing the required parameter 'teamToken' when calling removeTeam(Async)");
        }

        return removeTeamCall(teamToken, _callback);

    }


    private ApiResponse<Team> removeTeamWithHttpInfo(String teamToken) throws ApiException {
        okhttp3.Call localVarCall = removeTeamValidateBeforeCall(teamToken, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTeamAsync(String teamToken, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTeamValidateBeforeCall(teamToken, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTeamRequestBuilder {
        private final String teamToken;

        private RemoveTeamRequestBuilder(String teamToken) {
            this.teamToken = teamToken;
        }

        /**
         * Build call for removeTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTeamCall(teamToken, _callback);
        }


        /**
         * Execute removeTeam request
         * @return Team
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Team execute() throws ApiException {
            ApiResponse<Team> localVarResp = removeTeamWithHttpInfo(teamToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTeam request with HTTP info returned
         * @return ApiResponse&lt;Team&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Team> executeWithHttpInfo() throws ApiException {
            return removeTeamWithHttpInfo(teamToken);
        }

        /**
         * Execute removeTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Team> _callback) throws ApiException {
            return removeTeamAsync(teamToken, _callback);
        }
    }

    /**
     * 
     * Delete a Team.
     * @param teamToken  (required)
     * @return RemoveTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTeamRequestBuilder removeTeam(String teamToken) throws IllegalArgumentException {
        if (teamToken == null) throw new IllegalArgumentException("\"teamToken\" is required but got null");
            

        return new RemoveTeamRequestBuilder(teamToken);
    }
    private okhttp3.Call updateTeamCall(String teamToken, PutTeams putTeams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putTeams;

        // create path and map variables
        String localVarPath = "/teams/{team_token}"
            .replace("{" + "team_token" + "}", localVarApiClient.escapeString(teamToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamValidateBeforeCall(String teamToken, PutTeams putTeams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamToken' is set
        if (teamToken == null) {
            throw new ApiException("Missing the required parameter 'teamToken' when calling updateTeam(Async)");
        }

        // verify the required parameter 'putTeams' is set
        if (putTeams == null) {
            throw new ApiException("Missing the required parameter 'putTeams' when calling updateTeam(Async)");
        }

        return updateTeamCall(teamToken, putTeams, _callback);

    }


    private ApiResponse<Team> updateTeamWithHttpInfo(String teamToken, PutTeams putTeams) throws ApiException {
        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(teamToken, putTeams, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTeamAsync(String teamToken, PutTeams putTeams, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(teamToken, putTeams, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTeamRequestBuilder {
        private final String teamToken;
        private String description;
        private String name;
        private List<String> workspaceTokens;
        private List<String> userTokens;
        private List<String> userEmails;
        private String role;

        private UpdateTeamRequestBuilder(String teamToken) {
            this.teamToken = teamToken;
        }

        /**
         * Set description
         * @param description The description of the Team. (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the Team. (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set workspaceTokens
         * @param workspaceTokens The Workspace tokens to associate to the Team. (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder workspaceTokens(List<String> workspaceTokens) {
            this.workspaceTokens = workspaceTokens;
            return this;
        }
        
        /**
         * Set userTokens
         * @param userTokens The User tokens to associate to the Team. (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder userTokens(List<String> userTokens) {
            this.userTokens = userTokens;
            return this;
        }
        
        /**
         * Set userEmails
         * @param userEmails The User emails to associate to the Team. (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder userEmails(List<String> userEmails) {
            this.userEmails = userEmails;
            return this;
        }
        
        /**
         * Set role
         * @param role The role to assign to the provided Users. Defaults to &#39;editor&#39; which has editor permissions. (optional)
         * @return UpdateTeamRequestBuilder
         */
        public UpdateTeamRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Build call for updateTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutTeams putTeams = buildBodyParams();
            return updateTeamCall(teamToken, putTeams, _callback);
        }

        private PutTeams buildBodyParams() {
            PutTeams putTeams = new PutTeams();
            putTeams.description(this.description);
            putTeams.name(this.name);
            putTeams.workspaceTokens(this.workspaceTokens);
            putTeams.userTokens(this.userTokens);
            putTeams.userEmails(this.userEmails);
            if (this.role != null)
            putTeams.role(PutTeams.RoleEnum.fromValue(this.role));
            return putTeams;
        }

        /**
         * Execute updateTeam request
         * @return Team
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Team execute() throws ApiException {
            PutTeams putTeams = buildBodyParams();
            ApiResponse<Team> localVarResp = updateTeamWithHttpInfo(teamToken, putTeams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTeam request with HTTP info returned
         * @return ApiResponse&lt;Team&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Team> executeWithHttpInfo() throws ApiException {
            PutTeams putTeams = buildBodyParams();
            return updateTeamWithHttpInfo(teamToken, putTeams);
        }

        /**
         * Execute updateTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Team> _callback) throws ApiException {
            PutTeams putTeams = buildBodyParams();
            return updateTeamAsync(teamToken, putTeams, _callback);
        }
    }

    /**
     * 
     * Update a Team.
     * @param teamToken  (required)
     * @param putTeams  (required)
     * @return UpdateTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTeamRequestBuilder updateTeam(String teamToken) throws IllegalArgumentException {
        if (teamToken == null) throw new IllegalArgumentException("\"teamToken\" is required but got null");
            

        return new UpdateTeamRequestBuilder(teamToken);
    }
}
