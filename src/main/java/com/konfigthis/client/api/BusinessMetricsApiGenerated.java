/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BusinessMetric;
import com.konfigthis.client.model.BusinessMetrics;
import com.konfigthis.client.model.BusinessMetricsUpdateValuesCsvRequest;
import java.io.File;
import com.konfigthis.client.model.PostBusinessMetrics;
import com.konfigthis.client.model.PostBusinessMetricsCostReportTokensWithMetadataInner;
import com.konfigthis.client.model.PostBusinessMetricsValuesInner;
import com.konfigthis.client.model.PutBusinessMetrics;
import com.konfigthis.client.model.PutBusinessMetricsCostReportTokensWithMetadataInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BusinessMetricsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessMetricsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessMetricsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMetricCall(PostBusinessMetrics postBusinessMetrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postBusinessMetrics;

        // create path and map variables
        String localVarPath = "/business_metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMetricValidateBeforeCall(PostBusinessMetrics postBusinessMetrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postBusinessMetrics' is set
        if (postBusinessMetrics == null) {
            throw new ApiException("Missing the required parameter 'postBusinessMetrics' when calling createNewMetric(Async)");
        }

        return createNewMetricCall(postBusinessMetrics, _callback);

    }


    private ApiResponse<BusinessMetric> createNewMetricWithHttpInfo(PostBusinessMetrics postBusinessMetrics) throws ApiException {
        okhttp3.Call localVarCall = createNewMetricValidateBeforeCall(postBusinessMetrics, null);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMetricAsync(PostBusinessMetrics postBusinessMetrics, final ApiCallback<BusinessMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMetricValidateBeforeCall(postBusinessMetrics, _callback);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMetricRequestBuilder {
        private final String title;
        private List<PostBusinessMetricsCostReportTokensWithMetadataInner> costReportTokensWithMetadata;
        private List<PostBusinessMetricsValuesInner> values;

        private CreateNewMetricRequestBuilder(String title) {
            this.title = title;
        }

        /**
         * Set costReportTokensWithMetadata
         * @param costReportTokensWithMetadata The tokens for any CostReports that use the BusinessMetric, and the unit scale. (optional)
         * @return CreateNewMetricRequestBuilder
         */
        public CreateNewMetricRequestBuilder costReportTokensWithMetadata(List<PostBusinessMetricsCostReportTokensWithMetadataInner> costReportTokensWithMetadata) {
            this.costReportTokensWithMetadata = costReportTokensWithMetadata;
            return this;
        }
        
        /**
         * Set values
         * @param values The dates and amounts for the BusinessMetric. (optional)
         * @return CreateNewMetricRequestBuilder
         */
        public CreateNewMetricRequestBuilder values(List<PostBusinessMetricsValuesInner> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Build call for createNewMetric
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostBusinessMetrics postBusinessMetrics = buildBodyParams();
            return createNewMetricCall(postBusinessMetrics, _callback);
        }

        private PostBusinessMetrics buildBodyParams() {
            PostBusinessMetrics postBusinessMetrics = new PostBusinessMetrics();
            postBusinessMetrics.title(this.title);
            postBusinessMetrics.costReportTokensWithMetadata(this.costReportTokensWithMetadata);
            postBusinessMetrics.values(this.values);
            return postBusinessMetrics;
        }

        /**
         * Execute createNewMetric request
         * @return BusinessMetric
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BusinessMetric execute() throws ApiException {
            PostBusinessMetrics postBusinessMetrics = buildBodyParams();
            ApiResponse<BusinessMetric> localVarResp = createNewMetricWithHttpInfo(postBusinessMetrics);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMetric request with HTTP info returned
         * @return ApiResponse&lt;BusinessMetric&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessMetric> executeWithHttpInfo() throws ApiException {
            PostBusinessMetrics postBusinessMetrics = buildBodyParams();
            return createNewMetricWithHttpInfo(postBusinessMetrics);
        }

        /**
         * Execute createNewMetric request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessMetric> _callback) throws ApiException {
            PostBusinessMetrics postBusinessMetrics = buildBodyParams();
            return createNewMetricAsync(postBusinessMetrics, _callback);
        }
    }

    /**
     * 
     * Create a new Business Metric.
     * @param postBusinessMetrics  (required)
     * @return CreateNewMetricRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMetricRequestBuilder createNewMetric(String title) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        return new CreateNewMetricRequestBuilder(title);
    }
    private okhttp3.Call deleteExistingMetricCall(String businessMetricToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/business_metrics/{business_metric_token}"
            .replace("{" + "business_metric_token" + "}", localVarApiClient.escapeString(businessMetricToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExistingMetricValidateBeforeCall(String businessMetricToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessMetricToken' is set
        if (businessMetricToken == null) {
            throw new ApiException("Missing the required parameter 'businessMetricToken' when calling deleteExistingMetric(Async)");
        }

        return deleteExistingMetricCall(businessMetricToken, _callback);

    }


    private ApiResponse<BusinessMetric> deleteExistingMetricWithHttpInfo(String businessMetricToken) throws ApiException {
        okhttp3.Call localVarCall = deleteExistingMetricValidateBeforeCall(businessMetricToken, null);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteExistingMetricAsync(String businessMetricToken, final ApiCallback<BusinessMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExistingMetricValidateBeforeCall(businessMetricToken, _callback);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteExistingMetricRequestBuilder {
        private final String businessMetricToken;

        private DeleteExistingMetricRequestBuilder(String businessMetricToken) {
            this.businessMetricToken = businessMetricToken;
        }

        /**
         * Build call for deleteExistingMetric
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExistingMetricCall(businessMetricToken, _callback);
        }


        /**
         * Execute deleteExistingMetric request
         * @return BusinessMetric
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BusinessMetric execute() throws ApiException {
            ApiResponse<BusinessMetric> localVarResp = deleteExistingMetricWithHttpInfo(businessMetricToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteExistingMetric request with HTTP info returned
         * @return ApiResponse&lt;BusinessMetric&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessMetric> executeWithHttpInfo() throws ApiException {
            return deleteExistingMetricWithHttpInfo(businessMetricToken);
        }

        /**
         * Execute deleteExistingMetric request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessMetric> _callback) throws ApiException {
            return deleteExistingMetricAsync(businessMetricToken, _callback);
        }
    }

    /**
     * 
     * Deletes an existing BusinessMetric.
     * @param businessMetricToken  (required)
     * @return DeleteExistingMetricRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteExistingMetricRequestBuilder deleteExistingMetric(String businessMetricToken) throws IllegalArgumentException {
        if (businessMetricToken == null) throw new IllegalArgumentException("\"businessMetricToken\" is required but got null");
            

        return new DeleteExistingMetricRequestBuilder(businessMetricToken);
    }
    private okhttp3.Call getAllMetricsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/business_metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllMetricsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return getAllMetricsCall(page, limit, _callback);

    }


    private ApiResponse<BusinessMetrics> getAllMetricsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllMetricsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<BusinessMetrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllMetricsAsync(Integer page, Integer limit, final ApiCallback<BusinessMetrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllMetricsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<BusinessMetrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllMetricsRequestBuilder {
        private Integer page;
        private Integer limit;

        private GetAllMetricsRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return GetAllMetricsRequestBuilder
         */
        public GetAllMetricsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return GetAllMetricsRequestBuilder
         */
        public GetAllMetricsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllMetricsCall(page, limit, _callback);
        }


        /**
         * Execute getAllMetrics request
         * @return BusinessMetrics
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BusinessMetrics execute() throws ApiException {
            ApiResponse<BusinessMetrics> localVarResp = getAllMetricsWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllMetrics request with HTTP info returned
         * @return ApiResponse&lt;BusinessMetrics&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessMetrics> executeWithHttpInfo() throws ApiException {
            return getAllMetricsWithHttpInfo(page, limit);
        }

        /**
         * Execute getAllMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessMetrics> _callback) throws ApiException {
            return getAllMetricsAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all Business Metrics that the current API token has access to.
     * @return GetAllMetricsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllMetricsRequestBuilder getAllMetrics() throws IllegalArgumentException {
        return new GetAllMetricsRequestBuilder();
    }
    private okhttp3.Call getMetricByIdCall(String businessMetricToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/business_metrics/{business_metric_token}"
            .replace("{" + "business_metric_token" + "}", localVarApiClient.escapeString(businessMetricToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetricByIdValidateBeforeCall(String businessMetricToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessMetricToken' is set
        if (businessMetricToken == null) {
            throw new ApiException("Missing the required parameter 'businessMetricToken' when calling getMetricById(Async)");
        }

        return getMetricByIdCall(businessMetricToken, _callback);

    }


    private ApiResponse<BusinessMetric> getMetricByIdWithHttpInfo(String businessMetricToken) throws ApiException {
        okhttp3.Call localVarCall = getMetricByIdValidateBeforeCall(businessMetricToken, null);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetricByIdAsync(String businessMetricToken, final ApiCallback<BusinessMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetricByIdValidateBeforeCall(businessMetricToken, _callback);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetricByIdRequestBuilder {
        private final String businessMetricToken;

        private GetMetricByIdRequestBuilder(String businessMetricToken) {
            this.businessMetricToken = businessMetricToken;
        }

        /**
         * Build call for getMetricById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetricByIdCall(businessMetricToken, _callback);
        }


        /**
         * Execute getMetricById request
         * @return BusinessMetric
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BusinessMetric execute() throws ApiException {
            ApiResponse<BusinessMetric> localVarResp = getMetricByIdWithHttpInfo(businessMetricToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetricById request with HTTP info returned
         * @return ApiResponse&lt;BusinessMetric&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessMetric> executeWithHttpInfo() throws ApiException {
            return getMetricByIdWithHttpInfo(businessMetricToken);
        }

        /**
         * Execute getMetricById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessMetric> _callback) throws ApiException {
            return getMetricByIdAsync(businessMetricToken, _callback);
        }
    }

    /**
     * 
     * Return a specific Business Metric.
     * @param businessMetricToken  (required)
     * @return GetMetricByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricByIdRequestBuilder getMetricById(String businessMetricToken) throws IllegalArgumentException {
        if (businessMetricToken == null) throw new IllegalArgumentException("\"businessMetricToken\" is required but got null");
            

        return new GetMetricByIdRequestBuilder(businessMetricToken);
    }
    private okhttp3.Call updateExistingMetricCall(String businessMetricToken, PutBusinessMetrics putBusinessMetrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putBusinessMetrics;

        // create path and map variables
        String localVarPath = "/business_metrics/{business_metric_token}"
            .replace("{" + "business_metric_token" + "}", localVarApiClient.escapeString(businessMetricToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingMetricValidateBeforeCall(String businessMetricToken, PutBusinessMetrics putBusinessMetrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessMetricToken' is set
        if (businessMetricToken == null) {
            throw new ApiException("Missing the required parameter 'businessMetricToken' when calling updateExistingMetric(Async)");
        }

        // verify the required parameter 'putBusinessMetrics' is set
        if (putBusinessMetrics == null) {
            throw new ApiException("Missing the required parameter 'putBusinessMetrics' when calling updateExistingMetric(Async)");
        }

        return updateExistingMetricCall(businessMetricToken, putBusinessMetrics, _callback);

    }


    private ApiResponse<BusinessMetric> updateExistingMetricWithHttpInfo(String businessMetricToken, PutBusinessMetrics putBusinessMetrics) throws ApiException {
        okhttp3.Call localVarCall = updateExistingMetricValidateBeforeCall(businessMetricToken, putBusinessMetrics, null);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingMetricAsync(String businessMetricToken, PutBusinessMetrics putBusinessMetrics, final ApiCallback<BusinessMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingMetricValidateBeforeCall(businessMetricToken, putBusinessMetrics, _callback);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingMetricRequestBuilder {
        private final String businessMetricToken;
        private String title;
        private List<PutBusinessMetricsCostReportTokensWithMetadataInner> costReportTokensWithMetadata;
        private List<PostBusinessMetricsValuesInner> values;

        private UpdateExistingMetricRequestBuilder(String businessMetricToken) {
            this.businessMetricToken = businessMetricToken;
        }

        /**
         * Set title
         * @param title The title of the BusinessMetric. (optional)
         * @return UpdateExistingMetricRequestBuilder
         */
        public UpdateExistingMetricRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set costReportTokensWithMetadata
         * @param costReportTokensWithMetadata The tokens for any CostReports that use the BusinessMetric, and the unit scale. (optional)
         * @return UpdateExistingMetricRequestBuilder
         */
        public UpdateExistingMetricRequestBuilder costReportTokensWithMetadata(List<PutBusinessMetricsCostReportTokensWithMetadataInner> costReportTokensWithMetadata) {
            this.costReportTokensWithMetadata = costReportTokensWithMetadata;
            return this;
        }
        
        /**
         * Set values
         * @param values The dates and amounts for the BusinessMetric. (optional)
         * @return UpdateExistingMetricRequestBuilder
         */
        public UpdateExistingMetricRequestBuilder values(List<PostBusinessMetricsValuesInner> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Build call for updateExistingMetric
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutBusinessMetrics putBusinessMetrics = buildBodyParams();
            return updateExistingMetricCall(businessMetricToken, putBusinessMetrics, _callback);
        }

        private PutBusinessMetrics buildBodyParams() {
            PutBusinessMetrics putBusinessMetrics = new PutBusinessMetrics();
            putBusinessMetrics.title(this.title);
            putBusinessMetrics.costReportTokensWithMetadata(this.costReportTokensWithMetadata);
            putBusinessMetrics.values(this.values);
            return putBusinessMetrics;
        }

        /**
         * Execute updateExistingMetric request
         * @return BusinessMetric
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BusinessMetric execute() throws ApiException {
            PutBusinessMetrics putBusinessMetrics = buildBodyParams();
            ApiResponse<BusinessMetric> localVarResp = updateExistingMetricWithHttpInfo(businessMetricToken, putBusinessMetrics);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingMetric request with HTTP info returned
         * @return ApiResponse&lt;BusinessMetric&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessMetric> executeWithHttpInfo() throws ApiException {
            PutBusinessMetrics putBusinessMetrics = buildBodyParams();
            return updateExistingMetricWithHttpInfo(businessMetricToken, putBusinessMetrics);
        }

        /**
         * Execute updateExistingMetric request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessMetric> _callback) throws ApiException {
            PutBusinessMetrics putBusinessMetrics = buildBodyParams();
            return updateExistingMetricAsync(businessMetricToken, putBusinessMetrics, _callback);
        }
    }

    /**
     * 
     * Updates an existing BusinessMetric.
     * @param businessMetricToken  (required)
     * @param putBusinessMetrics  (required)
     * @return UpdateExistingMetricRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingMetricRequestBuilder updateExistingMetric(String businessMetricToken) throws IllegalArgumentException {
        if (businessMetricToken == null) throw new IllegalArgumentException("\"businessMetricToken\" is required but got null");
            

        return new UpdateExistingMetricRequestBuilder(businessMetricToken);
    }
    private okhttp3.Call updateValuesCsvCall(String businessMetricToken, File csv, BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessMetricsUpdateValuesCsvRequest;

        // create path and map variables
        String localVarPath = "/business_metrics/{business_metric_token}/values.csv"
            .replace("{" + "business_metric_token" + "}", localVarApiClient.escapeString(businessMetricToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (csv != null) {
            localVarFormParams.put("csv", csv);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValuesCsvValidateBeforeCall(String businessMetricToken, File csv, BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessMetricToken' is set
        if (businessMetricToken == null) {
            throw new ApiException("Missing the required parameter 'businessMetricToken' when calling updateValuesCsv(Async)");
        }

        // verify the required parameter 'csv' is set
        if (csv == null) {
            throw new ApiException("Missing the required parameter 'csv' when calling updateValuesCsv(Async)");
        }

        // verify the required parameter 'businessMetricsUpdateValuesCsvRequest' is set
        if (businessMetricsUpdateValuesCsvRequest == null) {
            throw new ApiException("Missing the required parameter 'businessMetricsUpdateValuesCsvRequest' when calling updateValuesCsv(Async)");
        }

        return updateValuesCsvCall(businessMetricToken, csv, businessMetricsUpdateValuesCsvRequest, _callback);

    }


    private ApiResponse<BusinessMetric> updateValuesCsvWithHttpInfo(String businessMetricToken, File csv, BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest) throws ApiException {
        okhttp3.Call localVarCall = updateValuesCsvValidateBeforeCall(businessMetricToken, csv, businessMetricsUpdateValuesCsvRequest, null);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateValuesCsvAsync(String businessMetricToken, File csv, BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest, final ApiCallback<BusinessMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValuesCsvValidateBeforeCall(businessMetricToken, csv, businessMetricsUpdateValuesCsvRequest, _callback);
        Type localVarReturnType = new TypeToken<BusinessMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateValuesCsvRequestBuilder {
        private final String businessMetricToken;
        private final File csv;

        private UpdateValuesCsvRequestBuilder(String businessMetricToken, File csv) {
            this.businessMetricToken = businessMetricToken;
            this.csv = csv;
        }

        /**
         * Build call for updateValuesCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest = buildBodyParams();
            return updateValuesCsvCall(businessMetricToken, csv, businessMetricsUpdateValuesCsvRequest, _callback);
        }

        private BusinessMetricsUpdateValuesCsvRequest buildBodyParams() {
            BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest = new BusinessMetricsUpdateValuesCsvRequest();
            businessMetricsUpdateValuesCsvRequest.csv(this.csv);
            return businessMetricsUpdateValuesCsvRequest;
        }

        /**
         * Execute updateValuesCsv request
         * @return BusinessMetric
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BusinessMetric execute() throws ApiException {
            BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest = buildBodyParams();
            ApiResponse<BusinessMetric> localVarResp = updateValuesCsvWithHttpInfo(businessMetricToken, csv, businessMetricsUpdateValuesCsvRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateValuesCsv request with HTTP info returned
         * @return ApiResponse&lt;BusinessMetric&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessMetric> executeWithHttpInfo() throws ApiException {
            BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest = buildBodyParams();
            return updateValuesCsvWithHttpInfo(businessMetricToken, csv, businessMetricsUpdateValuesCsvRequest);
        }

        /**
         * Execute updateValuesCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessMetric> _callback) throws ApiException {
            BusinessMetricsUpdateValuesCsvRequest businessMetricsUpdateValuesCsvRequest = buildBodyParams();
            return updateValuesCsvAsync(businessMetricToken, csv, businessMetricsUpdateValuesCsvRequest, _callback);
        }
    }

    /**
     * 
     * Updates the values for an existing BusinessMetric from a CSV file.
     * @param businessMetricToken  (required)
     * @param csv CSV file containing BusinessMetric dates and amounts (required)
     * @param businessMetricsUpdateValuesCsvRequest  (required)
     * @return UpdateValuesCsvRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateValuesCsvRequestBuilder updateValuesCsv(String businessMetricToken, File csv) throws IllegalArgumentException {
        if (businessMetricToken == null) throw new IllegalArgumentException("\"businessMetricToken\" is required but got null");
            

        if (csv == null) throw new IllegalArgumentException("\"csv\" is required but got null");
        return new UpdateValuesCsvRequestBuilder(businessMetricToken, csv);
    }
}
