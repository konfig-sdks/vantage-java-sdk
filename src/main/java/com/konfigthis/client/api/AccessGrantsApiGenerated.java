/*
 * Vantage
 * Vantage API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessGrant;
import com.konfigthis.client.model.AccessGrants;
import com.konfigthis.client.model.PostAccessGrants;
import com.konfigthis.client.model.PutAccessGrants;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccessGrantsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessGrantsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccessGrantsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createGrantCall(PostAccessGrants postAccessGrants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccessGrants;

        // create path and map variables
        String localVarPath = "/access_grants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGrantValidateBeforeCall(PostAccessGrants postAccessGrants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postAccessGrants' is set
        if (postAccessGrants == null) {
            throw new ApiException("Missing the required parameter 'postAccessGrants' when calling createGrant(Async)");
        }

        return createGrantCall(postAccessGrants, _callback);

    }


    private ApiResponse<AccessGrant> createGrantWithHttpInfo(PostAccessGrants postAccessGrants) throws ApiException {
        okhttp3.Call localVarCall = createGrantValidateBeforeCall(postAccessGrants, null);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGrantAsync(PostAccessGrants postAccessGrants, final ApiCallback<AccessGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGrantValidateBeforeCall(postAccessGrants, _callback);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateGrantRequestBuilder {
        private final String resourceToken;
        private final String teamToken;
        private String access;

        private CreateGrantRequestBuilder(String resourceToken, String teamToken) {
            this.resourceToken = resourceToken;
            this.teamToken = teamToken;
        }

        /**
         * Set access
         * @param access The access level you want to grant. Defaults to &#39;allowed&#39;. (optional)
         * @return CreateGrantRequestBuilder
         */
        public CreateGrantRequestBuilder access(String access) {
            this.access = access;
            return this;
        }
        
        /**
         * Build call for createGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostAccessGrants postAccessGrants = buildBodyParams();
            return createGrantCall(postAccessGrants, _callback);
        }

        private PostAccessGrants buildBodyParams() {
            PostAccessGrants postAccessGrants = new PostAccessGrants();
            postAccessGrants.resourceToken(this.resourceToken);
            postAccessGrants.teamToken(this.teamToken);
            if (this.access != null)
            postAccessGrants.access(PostAccessGrants.AccessEnum.fromValue(this.access));
            return postAccessGrants;
        }

        /**
         * Execute createGrant request
         * @return AccessGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AccessGrant execute() throws ApiException {
            PostAccessGrants postAccessGrants = buildBodyParams();
            ApiResponse<AccessGrant> localVarResp = createGrantWithHttpInfo(postAccessGrants);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createGrant request with HTTP info returned
         * @return ApiResponse&lt;AccessGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessGrant> executeWithHttpInfo() throws ApiException {
            PostAccessGrants postAccessGrants = buildBodyParams();
            return createGrantWithHttpInfo(postAccessGrants);
        }

        /**
         * Execute createGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessGrant> _callback) throws ApiException {
            PostAccessGrants postAccessGrants = buildBodyParams();
            return createGrantAsync(postAccessGrants, _callback);
        }
    }

    /**
     * 
     * Create an Access Grant.
     * @param postAccessGrants  (required)
     * @return CreateGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateGrantRequestBuilder createGrant(String resourceToken, String teamToken) throws IllegalArgumentException {
        if (resourceToken == null) throw new IllegalArgumentException("\"resourceToken\" is required but got null");
            

        if (teamToken == null) throw new IllegalArgumentException("\"teamToken\" is required but got null");
            

        return new CreateGrantRequestBuilder(resourceToken, teamToken);
    }
    private okhttp3.Call deleteCall(String accessGrantToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_grants/{access_grant_token}"
            .replace("{" + "access_grant_token" + "}", localVarApiClient.escapeString(accessGrantToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String accessGrantToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGrantToken' is set
        if (accessGrantToken == null) {
            throw new ApiException("Missing the required parameter 'accessGrantToken' when calling delete(Async)");
        }

        return deleteCall(accessGrantToken, _callback);

    }


    private ApiResponse<AccessGrant> deleteWithHttpInfo(String accessGrantToken) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(accessGrantToken, null);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String accessGrantToken, final ApiCallback<AccessGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(accessGrantToken, _callback);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String accessGrantToken;

        private DeleteRequestBuilder(String accessGrantToken) {
            this.accessGrantToken = accessGrantToken;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(accessGrantToken, _callback);
        }


        /**
         * Execute delete request
         * @return AccessGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AccessGrant execute() throws ApiException {
            ApiResponse<AccessGrant> localVarResp = deleteWithHttpInfo(accessGrantToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;AccessGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessGrant> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(accessGrantToken);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessGrant> _callback) throws ApiException {
            return deleteAsync(accessGrantToken, _callback);
        }
    }

    /**
     * 
     * Delete an Access Grant.
     * @param accessGrantToken  (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String accessGrantToken) throws IllegalArgumentException {
        if (accessGrantToken == null) throw new IllegalArgumentException("\"accessGrantToken\" is required but got null");
            

        return new DeleteRequestBuilder(accessGrantToken);
    }
    private okhttp3.Call getSpecificGrantCall(String accessGrantToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_grants/{access_grant_token}"
            .replace("{" + "access_grant_token" + "}", localVarApiClient.escapeString(accessGrantToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificGrantValidateBeforeCall(String accessGrantToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGrantToken' is set
        if (accessGrantToken == null) {
            throw new ApiException("Missing the required parameter 'accessGrantToken' when calling getSpecificGrant(Async)");
        }

        return getSpecificGrantCall(accessGrantToken, _callback);

    }


    private ApiResponse<AccessGrant> getSpecificGrantWithHttpInfo(String accessGrantToken) throws ApiException {
        okhttp3.Call localVarCall = getSpecificGrantValidateBeforeCall(accessGrantToken, null);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificGrantAsync(String accessGrantToken, final ApiCallback<AccessGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificGrantValidateBeforeCall(accessGrantToken, _callback);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificGrantRequestBuilder {
        private final String accessGrantToken;

        private GetSpecificGrantRequestBuilder(String accessGrantToken) {
            this.accessGrantToken = accessGrantToken;
        }

        /**
         * Build call for getSpecificGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificGrantCall(accessGrantToken, _callback);
        }


        /**
         * Execute getSpecificGrant request
         * @return AccessGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AccessGrant execute() throws ApiException {
            ApiResponse<AccessGrant> localVarResp = getSpecificGrantWithHttpInfo(accessGrantToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificGrant request with HTTP info returned
         * @return ApiResponse&lt;AccessGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessGrant> executeWithHttpInfo() throws ApiException {
            return getSpecificGrantWithHttpInfo(accessGrantToken);
        }

        /**
         * Execute getSpecificGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessGrant> _callback) throws ApiException {
            return getSpecificGrantAsync(accessGrantToken, _callback);
        }
    }

    /**
     * 
     * Return a specific Access Grant.
     * @param accessGrantToken  (required)
     * @return GetSpecificGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificGrantRequestBuilder getSpecificGrant(String accessGrantToken) throws IllegalArgumentException {
        if (accessGrantToken == null) throw new IllegalArgumentException("\"accessGrantToken\" is required but got null");
            

        return new GetSpecificGrantRequestBuilder(accessGrantToken);
    }
    private okhttp3.Call listAccessibleCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_grants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccessibleValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return listAccessibleCall(page, limit, _callback);

    }


    private ApiResponse<AccessGrants> listAccessibleWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAccessibleValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<AccessGrants>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAccessibleAsync(Integer page, Integer limit, final ApiCallback<AccessGrants> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccessibleValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<AccessGrants>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAccessibleRequestBuilder {
        private Integer page;
        private Integer limit;

        private ListAccessibleRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page of results to return. (optional)
         * @return ListAccessibleRequestBuilder
         */
        public ListAccessibleRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The amount of results to return. The maximum is 1000. (optional)
         * @return ListAccessibleRequestBuilder
         */
        public ListAccessibleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAccessible
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAccessibleCall(page, limit, _callback);
        }


        /**
         * Execute listAccessible request
         * @return AccessGrants
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AccessGrants execute() throws ApiException {
            ApiResponse<AccessGrants> localVarResp = listAccessibleWithHttpInfo(page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAccessible request with HTTP info returned
         * @return ApiResponse&lt;AccessGrants&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessGrants> executeWithHttpInfo() throws ApiException {
            return listAccessibleWithHttpInfo(page, limit);
        }

        /**
         * Execute listAccessible request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessGrants> _callback) throws ApiException {
            return listAccessibleAsync(page, limit, _callback);
        }
    }

    /**
     * 
     * Return all Access Grants that the current API token has access to.
     * @return ListAccessibleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAccessibleRequestBuilder listAccessible() throws IllegalArgumentException {
        return new ListAccessibleRequestBuilder();
    }
    private okhttp3.Call updateGrantTokenCall(String accessGrantToken, PutAccessGrants putAccessGrants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAccessGrants;

        // create path and map variables
        String localVarPath = "/access_grants/{access_grant_token}"
            .replace("{" + "access_grant_token" + "}", localVarApiClient.escapeString(accessGrantToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGrantTokenValidateBeforeCall(String accessGrantToken, PutAccessGrants putAccessGrants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGrantToken' is set
        if (accessGrantToken == null) {
            throw new ApiException("Missing the required parameter 'accessGrantToken' when calling updateGrantToken(Async)");
        }

        // verify the required parameter 'putAccessGrants' is set
        if (putAccessGrants == null) {
            throw new ApiException("Missing the required parameter 'putAccessGrants' when calling updateGrantToken(Async)");
        }

        return updateGrantTokenCall(accessGrantToken, putAccessGrants, _callback);

    }


    private ApiResponse<AccessGrant> updateGrantTokenWithHttpInfo(String accessGrantToken, PutAccessGrants putAccessGrants) throws ApiException {
        okhttp3.Call localVarCall = updateGrantTokenValidateBeforeCall(accessGrantToken, putAccessGrants, null);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGrantTokenAsync(String accessGrantToken, PutAccessGrants putAccessGrants, final ApiCallback<AccessGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGrantTokenValidateBeforeCall(accessGrantToken, putAccessGrants, _callback);
        Type localVarReturnType = new TypeToken<AccessGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGrantTokenRequestBuilder {
        private final String access;
        private final String accessGrantToken;

        private UpdateGrantTokenRequestBuilder(String access, String accessGrantToken) {
            this.access = access;
            this.accessGrantToken = accessGrantToken;
        }

        /**
         * Build call for updateGrantToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutAccessGrants putAccessGrants = buildBodyParams();
            return updateGrantTokenCall(accessGrantToken, putAccessGrants, _callback);
        }

        private PutAccessGrants buildBodyParams() {
            PutAccessGrants putAccessGrants = new PutAccessGrants();
            if (this.access != null)
            putAccessGrants.access(PutAccessGrants.AccessEnum.fromValue(this.access));
            return putAccessGrants;
        }

        /**
         * Execute updateGrantToken request
         * @return AccessGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AccessGrant execute() throws ApiException {
            PutAccessGrants putAccessGrants = buildBodyParams();
            ApiResponse<AccessGrant> localVarResp = updateGrantTokenWithHttpInfo(accessGrantToken, putAccessGrants);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGrantToken request with HTTP info returned
         * @return ApiResponse&lt;AccessGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessGrant> executeWithHttpInfo() throws ApiException {
            PutAccessGrants putAccessGrants = buildBodyParams();
            return updateGrantTokenWithHttpInfo(accessGrantToken, putAccessGrants);
        }

        /**
         * Execute updateGrantToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessGrant> _callback) throws ApiException {
            PutAccessGrants putAccessGrants = buildBodyParams();
            return updateGrantTokenAsync(accessGrantToken, putAccessGrants, _callback);
        }
    }

    /**
     * 
     * Update an AccessGrant.
     * @param accessGrantToken  (required)
     * @param putAccessGrants  (required)
     * @return UpdateGrantTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGrantTokenRequestBuilder updateGrantToken(String access, String accessGrantToken) throws IllegalArgumentException {
        if (access == null) throw new IllegalArgumentException("\"access\" is required but got null");
            

        if (accessGrantToken == null) throw new IllegalArgumentException("\"accessGrantToken\" is required but got null");
            

        return new UpdateGrantTokenRequestBuilder(access, accessGrantToken);
    }
}
